{
  "inventory": {
    "timestamp": "2025-07-11T03:27:49.857Z",
    "summary": {
      "totalFiles": 140,
      "totalLines": 56016,
      "totalSize": 1604126,
      "totalFunctions": 427,
      "totalClasses": 55,
      "totalTodos": 0,
      "averageLinesPerFile": 400,
      "averageSizePerFile": 11458
    },
    "files": [
      {
        "path": "shared/data/tempHarnessTestData.ts",
        "lines": 23033,
        "size": 687256,
        "functions": 0,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/data/tempHarnessLinks.ts",
        "lines": 14034,
        "size": 335859,
        "functions": 0,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
        "lines": 631,
        "size": 19426,
        "functions": 9,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
        "lines": 647,
        "size": 18740,
        "functions": 10,
        "classes": 5,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
        "lines": 646,
        "size": 18739,
        "functions": 10,
        "classes": 5,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
        "lines": 422,
        "size": 14860,
        "functions": 13,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
        "lines": 397,
        "size": 13786,
        "functions": 12,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/stateManager.ts",
        "lines": 403,
        "size": 13445,
        "functions": 2,
        "classes": 1,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
        "lines": 350,
        "size": 12465,
        "functions": 14,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/layerGrid.ts",
        "lines": 365,
        "size": 12152,
        "functions": 17,
        "classes": 0,
        "interfaces": 3,
        "todos": 0
      },
      {
        "path": "client/services/configGui/makeConfigGui.ts",
        "lines": 359,
        "size": 11736,
        "functions": 8,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "server/services/main/game.service.ts",
        "lines": 348,
        "size": 11542,
        "functions": 15,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
        "lines": 302,
        "size": 10869,
        "functions": 6,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/utils/validation/configValidation.ts",
        "lines": 371,
        "size": 10682,
        "functions": 10,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts",
        "lines": 315,
        "size": 10482,
        "functions": 4,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "lines": 334,
        "size": 9408,
        "functions": 7,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/yAxisControls.ts",
        "lines": 257,
        "size": 9054,
        "functions": 10,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
        "lines": 240,
        "size": 8912,
        "functions": 6,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
        "lines": 233,
        "size": 8909,
        "functions": 5,
        "classes": 1,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "client/services/configGui/componentFactory.ts",
        "lines": 299,
        "size": 8761,
        "functions": 6,
        "classes": 1,
        "interfaces": 6,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
        "lines": 223,
        "size": 8068,
        "functions": 4,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
        "lines": 252,
        "size": 7914,
        "functions": 3,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/visualCustomizationControls.ts",
        "lines": 213,
        "size": 7796,
        "functions": 8,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "client/services/keyboardShortcuts.service.ts",
        "lines": 207,
        "size": 7791,
        "functions": 3,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/flatBlockCreator.ts",
        "lines": 237,
        "size": 7400,
        "functions": 4,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
        "lines": 246,
        "size": 7309,
        "functions": 5,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/propertyValueResolver.ts",
        "lines": 258,
        "size": 7026,
        "functions": 2,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/verticalWallCreator.ts",
        "lines": 193,
        "size": 7012,
        "functions": 6,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
        "lines": 185,
        "size": 6789,
        "functions": 3,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
        "lines": 227,
        "size": 6598,
        "functions": 9,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/nodeTypesSection.ts",
        "lines": 170,
        "size": 6578,
        "functions": 4,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "lines": 211,
        "size": 6423,
        "functions": 4,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/labelGroupMaker.ts",
        "lines": 179,
        "size": 6210,
        "functions": 3,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "server/services/groupAnimationTest.service.ts",
        "lines": 222,
        "size": 6092,
        "functions": 5,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/blocks/endcapBlockCreator.ts",
        "lines": 216,
        "size": 6067,
        "functions": 1,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/validationHandlers.ts",
        "lines": 199,
        "size": 5713,
        "functions": 7,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/collapsibleFrame.ts",
        "lines": 186,
        "size": 5590,
        "functions": 7,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/utils/validation/stringValidation.ts",
        "lines": 214,
        "size": 5525,
        "functions": 7,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "server/services/configGUIServer.service.ts",
        "lines": 138,
        "size": 5514,
        "functions": 1,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/controllers/configGUI.controller.ts",
        "lines": 164,
        "size": 5477,
        "functions": 1,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/data/tempTestData.ts",
        "lines": 252,
        "size": 5424,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "lines": 174,
        "size": 5320,
        "functions": 0,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/eventHandlers.ts",
        "lines": 173,
        "size": 5301,
        "functions": 0,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
        "lines": 187,
        "size": 5151,
        "functions": 3,
        "classes": 1,
        "interfaces": 4,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
        "lines": 154,
        "size": 4672,
        "functions": 5,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/services/base/BaseService.ts",
        "lines": 172,
        "size": 4629,
        "functions": 2,
        "classes": 4,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/visualizationControls.ts",
        "lines": 126,
        "size": 4554,
        "functions": 3,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
        "lines": 149,
        "size": 4428,
        "functions": 12,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/dropdownTestControls.ts",
        "lines": 137,
        "size": 4423,
        "functions": 7,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/utils/propertyDiscovery.ts",
        "lines": 145,
        "size": 4363,
        "functions": 8,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/controllers/animationTestGUI.controller.ts",
        "lines": 157,
        "size": 4208,
        "functions": 3,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "server/services/graphInitializer.service.ts",
        "lines": 151,
        "size": 4055,
        "functions": 2,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/utils/validation/arrayValidation.ts",
        "lines": 177,
        "size": 3960,
        "functions": 8,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
        "lines": 135,
        "size": 3902,
        "functions": 8,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts",
        "lines": 154,
        "size": 3886,
        "functions": 2,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/constants.ts",
        "lines": 134,
        "size": 3880,
        "functions": 9,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/constants/robloxColors.ts",
        "lines": 92,
        "size": 3811,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "server/services/colorsTest.service.ts",
        "lines": 126,
        "size": 3776,
        "functions": 1,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
        "lines": 123,
        "size": 3718,
        "functions": 5,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/spacingControls.ts",
        "lines": 96,
        "size": 3718,
        "functions": 3,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
        "lines": 142,
        "size": 3584,
        "functions": 7,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/types.ts",
        "lines": 179,
        "size": 3533,
        "functions": 3,
        "classes": 0,
        "interfaces": 16,
        "todos": 0
      },
      {
        "path": "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
        "lines": 154,
        "size": 3523,
        "functions": 1,
        "classes": 0,
        "interfaces": 3,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/dropdown.ts",
        "lines": 116,
        "size": 3515,
        "functions": 7,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
        "lines": 113,
        "size": 3421,
        "functions": 2,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
        "lines": 103,
        "size": 3361,
        "functions": 6,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/barMaker/standardizedInterfaces.ts",
        "lines": 135,
        "size": 3297,
        "functions": 1,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/main.ts",
        "lines": 97,
        "size": 3217,
        "functions": 3,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/barMaker/barMaker.ts",
        "lines": 109,
        "size": 3152,
        "functions": 1,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexagonMaker/hexagonMaker.ts",
        "lines": 107,
        "size": 3088,
        "functions": 1,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/TextLabelMaker.ts",
        "lines": 100,
        "size": 3048,
        "functions": 2,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/TextBoxMaker.ts",
        "lines": 101,
        "size": 2963,
        "functions": 2,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/makeOriginBlock.ts",
        "lines": 91,
        "size": 2926,
        "functions": 2,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/interfaces/IMaker.ts",
        "lines": 128,
        "size": 2858,
        "functions": 1,
        "classes": 0,
        "interfaces": 7,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
        "lines": 106,
        "size": 2845,
        "functions": 1,
        "classes": 1,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/components/radioButton.ts",
        "lines": 83,
        "size": 2782,
        "functions": 3,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/labelBlockMaker/labelBlockMaker.ts",
        "lines": 94,
        "size": 2754,
        "functions": 1,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/guiLayout.ts",
        "lines": 90,
        "size": 2643,
        "functions": 0,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/constants.ts",
        "lines": 107,
        "size": 2601,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/utils/nodePropertyHelpers.ts",
        "lines": 89,
        "size": 2599,
        "functions": 6,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
        "lines": 116,
        "size": 2529,
        "functions": 0,
        "classes": 0,
        "interfaces": 8,
        "todos": 0
      },
      {
        "path": "shared/interfaces/enhancedGenerator.interface.ts",
        "lines": 74,
        "size": 2518,
        "functions": 0,
        "classes": 0,
        "interfaces": 9,
        "todos": 0
      },
      {
        "path": "shared/modules/ropeLabelMaker/utilities.ts",
        "lines": 88,
        "size": 2460,
        "functions": 4,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
        "lines": 67,
        "size": 2452,
        "functions": 0,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/constants/blockConstants.ts",
        "lines": 62,
        "size": 2439,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexagonMaker/utilities.ts",
        "lines": 74,
        "size": 2436,
        "functions": 4,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "lines": 86,
        "size": 2408,
        "functions": 0,
        "classes": 2,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/utilities.ts",
        "lines": 82,
        "size": 2365,
        "functions": 5,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
        "lines": 71,
        "size": 2349,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/interfaces/simpleDataGenerator.interface.ts",
        "lines": 72,
        "size": 2307,
        "functions": 0,
        "classes": 0,
        "interfaces": 5,
        "todos": 0
      },
      {
        "path": "shared/modules/hexagonMaker/standardizedInterfaces.ts",
        "lines": 97,
        "size": 2285,
        "functions": 1,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
        "lines": 69,
        "size": 2206,
        "functions": 0,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexStackMaker/hexStackMaker.ts",
        "lines": 74,
        "size": 2137,
        "functions": 1,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/main.client.ts",
        "lines": 53,
        "size": 2088,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/constants/axisDefaults.ts",
        "lines": 62,
        "size": 2077,
        "functions": 5,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/constants.ts",
        "lines": 79,
        "size": 2073,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/labelBlockMaker/utilities.ts",
        "lines": 59,
        "size": 1965,
        "functions": 2,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
        "lines": 75,
        "size": 1847,
        "functions": 0,
        "classes": 0,
        "interfaces": 7,
        "todos": 0
      },
      {
        "path": "shared/modules/barMaker/utilities.ts",
        "lines": 49,
        "size": 1825,
        "functions": 4,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
        "lines": 74,
        "size": 1814,
        "functions": 1,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/hexStackMaker/standardizedInterfaces.ts",
        "lines": 73,
        "size": 1700,
        "functions": 1,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/blocks/platformBlockCreator.ts",
        "lines": 65,
        "size": 1692,
        "functions": 0,
        "classes": 1,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/frame.ts",
        "lines": 49,
        "size": 1549,
        "functions": 2,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/types.ts",
        "lines": 58,
        "size": 1539,
        "functions": 0,
        "classes": 0,
        "interfaces": 6,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/globalSettings.ts",
        "lines": 48,
        "size": 1504,
        "functions": 1,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/interfaces/nodeTypes.ts",
        "lines": 54,
        "size": 1493,
        "functions": 3,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/status.ts",
        "lines": 40,
        "size": 1472,
        "functions": 2,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/labelBlockMaker/interfaces.ts",
        "lines": 52,
        "size": 1320,
        "functions": 0,
        "classes": 0,
        "interfaces": 4,
        "todos": 0
      },
      {
        "path": "server/services/main/dev2features.ts",
        "lines": 34,
        "size": 1090,
        "functions": 1,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/constants/labelConstants.ts",
        "lines": 39,
        "size": 982,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
        "lines": 40,
        "size": 971,
        "functions": 1,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/interfaces.ts",
        "lines": 35,
        "size": 961,
        "functions": 0,
        "classes": 0,
        "interfaces": 3,
        "todos": 0
      },
      {
        "path": "shared/modules/ropeLabelMaker/interfaces.ts",
        "lines": 49,
        "size": 911,
        "functions": 0,
        "classes": 0,
        "interfaces": 4,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/constants/layoutConstants.ts",
        "lines": 29,
        "size": 887,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/constants/positionConstants.ts",
        "lines": 35,
        "size": 881,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts",
        "lines": 33,
        "size": 868,
        "functions": 2,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/barMaker/interfaces.ts",
        "lines": 36,
        "size": 836,
        "functions": 0,
        "classes": 0,
        "interfaces": 2,
        "todos": 0
      },
      {
        "path": "shared/interfaces/IService.ts",
        "lines": 39,
        "size": 819,
        "functions": 0,
        "classes": 0,
        "interfaces": 3,
        "todos": 0
      },
      {
        "path": "server/main.server.ts",
        "lines": 22,
        "size": 799,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/labelBlockMaker/constants.ts",
        "lines": 28,
        "size": 770,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/title.ts",
        "lines": 26,
        "size": 746,
        "functions": 1,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/ropeLabelMaker/constants.ts",
        "lines": 39,
        "size": 706,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexagonMaker/constants.ts",
        "lines": 29,
        "size": 701,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexStackMaker/constants.ts",
        "lines": 23,
        "size": 572,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexStackMaker/utilities.ts",
        "lines": 16,
        "size": 563,
        "functions": 2,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/utils/stringUtils.ts",
        "lines": 22,
        "size": 548,
        "functions": 1,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/barMaker/constants.ts",
        "lines": 21,
        "size": 514,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "client/services/configGui/index.ts",
        "lines": 11,
        "size": 493,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/labelBlockMaker/index.ts",
        "lines": 16,
        "size": 398,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/blocks/index.ts",
        "lines": 10,
        "size": 283,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/ropeLabelMaker/index.ts",
        "lines": 12,
        "size": 253,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexStackMaker/index.ts",
        "lines": 6,
        "size": 242,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexagonMaker/index.ts",
        "lines": 6,
        "size": 238,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/barMaker/index.ts",
        "lines": 6,
        "size": 233,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexagonMaker/interfaces.ts",
        "lines": 11,
        "size": 231,
        "functions": 0,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/unifiedDataRenderer/index.ts",
        "lines": 9,
        "size": 228,
        "functions": 0,
        "classes": 1,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/hexStackMaker/interfaces.ts",
        "lines": 9,
        "size": 212,
        "functions": 0,
        "classes": 0,
        "interfaces": 1,
        "todos": 0
      },
      {
        "path": "client/services/configGui/components/axisMappingControls/index.ts",
        "lines": 5,
        "size": 179,
        "functions": 1,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/modules/renderers/constants/index.ts",
        "lines": 7,
        "size": 152,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      },
      {
        "path": "shared/utils/validation/index.ts",
        "lines": 7,
        "size": 146,
        "functions": 0,
        "classes": 0,
        "interfaces": 0,
        "todos": 0
      }
    ]
  },
  "codeIssues": [
    {
      "file": "client/controllers/animationTestGUI.controller.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteEvent) {",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"animationStarted\") {",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"animationCompleted\") {",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.isAnimating && this.button) {",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.isAnimating && this.button) {",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.isAnimating) {",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.gui) {",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteEvent =",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/controllers/animationTestGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui =",
          "file": "client/controllers/animationTestGUI.controller.ts"
        }
      ]
    },
    {
      "file": "client/controllers/configGUI.controller.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (configData.layers) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.guiService) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"regenerateSuccess\") {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"regenerateError\") {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"updateSuccess\") {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"updateError\") {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteEvent =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventConnection =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configData =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const enhancedConfig =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const enhancedConfig =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const properties =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult =",
          "file": "client/controllers/configGUI.controller.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage =",
          "file": "client/controllers/configGUI.controller.ts"
        }
      ]
    },
    {
      "file": "client/main.client.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!player.Character) {",
          "file": "client/main.client.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const starterGui =",
          "file": "client/main.client.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/main.client.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeInspector =",
          "file": "client/main.client.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/componentFactory.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.onClick) {",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.onFocusLost) {",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.onClick) {",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value === undefined) {",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.min !== undefined && value < options.min) {",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.max !== undefined && value > options.max) {",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.onFocusLost) {",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const checkbox =",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let checked =",
          "file": "client/services/configGui/componentFactory.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/configGui/componentFactory.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (match && match[1]) {",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableProps =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propsWithCounts =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const count =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const formatButtonText =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const count =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisButton =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisButton =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisButton =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const extractPropertyName =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const match =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propName =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propName =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propName =",
          "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!isOpen) {",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && isOpen && optionsFrame) {",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (optionsFrame) {",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let isOpen =",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const buttonPosition =",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const buttonSize =",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxVisibleItems =",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visibleHeight =",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scrollFrame =",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scrollFrame =",
          "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/radioButton.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (radioButton) {",
          "file": "client/services/configGui/components/axisMappingControls/components/radioButton.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (innerCircle) {",
          "file": "client/services/configGui/components/axisMappingControls/components/radioButton.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bgColorButton =",
          "file": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const borderColorButton =",
          "file": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!currentUseLayer) {",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (onYAxisModeChange) {",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (currentUseLayer) {",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (onYAxisModeChange) {",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (onYAxisPropertyChange && yAxisPropertyButton) {",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!currentUseLayer && onYAxisPropertyChange) {",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const useLayerRadio =",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const usePropertyRadio =",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisPropertyButton =",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let currentUseLayer =",
          "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/constants.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const counts =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const workspace =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const myStuff =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMaker =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterFolder =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propCounts =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentCount =",
          "file": "client/services/configGui/components/axisMappingControls/constants.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/index.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/main.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mapping =",
          "file": "client/services/configGui/components/axisMappingControls/main.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visMapping =",
          "file": "client/services/configGui/components/axisMappingControls/main.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const gui =",
          "file": "client/services/configGui/components/axisMappingControls/main.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableProps =",
          "file": "client/services/configGui/components/axisMappingControls/main.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisDefaultValue =",
          "file": "client/services/configGui/components/axisMappingControls/main.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mainFrame =",
          "file": "client/services/configGui/components/axisMappingControls/main.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/types.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!axisDropdownGUI) {",
          "file": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axisDropdownGUI) {",
          "file": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui =",
          "file": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/collapsibleFrame.ts",
      "issues": [
        {
          "type": "naming",
          "message": "Function name 'function\n  const' should be camelCase",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isCollapsed) {",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1) {",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (dragging && input.UserInputType === Enum.UserInputType.MouseMovement && dragStart && startPos) {",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1) {",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let isCollapsed =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const headerCorner =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const toggleButton =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const toggle =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetSize =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const tween =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const setCollapsed =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let dragging =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const delta =",
          "file": "client/services/configGui/components/collapsibleFrame.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/dropdown.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && isOpen) {",
          "file": "client/services/configGui/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let isOpen =",
          "file": "client/services/configGui/components/dropdown.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const userInputService =",
          "file": "client/services/configGui/components/dropdown.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/dropdownTestControls.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && isOpen) {",
          "file": "client/services/configGui/components/dropdownTestControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let isOpen =",
          "file": "client/services/configGui/components/dropdownTestControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const userInputService =",
          "file": "client/services/configGui/components/dropdownTestControls.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/frame.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.borderSizePixel === undefined || options.borderSizePixel === 0) {",
          "file": "client/services/configGui/components/frame.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/globalSettings.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/components/layerGrid.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < 3; i++) {",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value > 0) {",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 0) {",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerLabel) {",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const updateCanvasSize =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const contentHeight =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const notifyLayerChange =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configs =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const addLayer =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNumber =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const previousLayer =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/configGui/components/layerGrid.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/configGui/components/layerGrid.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/nodeTypesSection.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 1 && value <= GUI_CONSTANTS.ENHANCED.DROPDOWN_ITEMS) {",
          "file": "client/services/configGui/components/nodeTypesSection.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 1 && value <= GUI_CONSTANTS.ENHANCED.DROPDOWN_ITEMS) {",
          "file": "client/services/configGui/components/nodeTypesSection.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 1 && value <= GUI_CONSTANTS.ENHANCED.DROPDOWN_ITEMS) {",
          "file": "client/services/configGui/components/nodeTypesSection.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (onPetTypesChange) {",
          "file": "client/services/configGui/components/nodeTypesSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/configGui/components/nodeTypesSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/configGui/components/nodeTypesSection.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/configGui/components/nodeTypesSection.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/spacingControls.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= fieldDef.min && value <= fieldDef.max) {",
          "file": "client/services/configGui/components/spacingControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const col2X =",
          "file": "client/services/configGui/components/spacingControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const itemsPerColumn =",
          "file": "client/services/configGui/components/spacingControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const column =",
          "file": "client/services/configGui/components/spacingControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const rowIndex =",
          "file": "client/services/configGui/components/spacingControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPos =",
          "file": "client/services/configGui/components/spacingControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xPos =",
          "file": "client/services/configGui/components/spacingControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/configGui/components/spacingControls.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/status.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isError) {",
          "file": "client/services/configGui/components/status.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const originalColor =",
          "file": "client/services/configGui/components/status.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/title.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/components/visualCustomizationControls.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isOpening) {",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && !gameProcessed) {",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mapping =",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const actualHeight =",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isOpening =",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const userInputService =",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mouse =",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target =",
          "file": "client/services/configGui/components/visualCustomizationControls.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/visualizationControls.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const columnWidth =",
          "file": "client/services/configGui/components/visualizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row =",
          "file": "client/services/configGui/components/visualizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const col =",
          "file": "client/services/configGui/components/visualizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xPos =",
          "file": "client/services/configGui/components/visualizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPos =",
          "file": "client/services/configGui/components/visualizationControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const newValue =",
          "file": "client/services/configGui/components/visualizationControls.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/yAxisControls.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isOpening) {",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && !gameProcessed) {",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const newUseLayer =",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisProperties =",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const actualHeight =",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isOpening =",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const userInputService =",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mouse =",
          "file": "client/services/configGui/components/yAxisControls.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target =",
          "file": "client/services/configGui/components/yAxisControls.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/constants.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/eventHandlers.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onEnhancedConfigChange) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!validationResult.isValid) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onEnhancedConfigChange) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!validationResult.isValid) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onUpdateRequest) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onClearRequest) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.configFrame) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.statusLabel) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < count; i++) {",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config =",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config =",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult =",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config =",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult =",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state =",
          "file": "client/services/configGui/eventHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state =",
          "file": "client/services/configGui/eventHandlers.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/guiLayout.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/index.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/interfaces.ts",
      "issues": []
    },
    {
      "file": "client/services/configGui/makeConfigGui.ts",
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingGui) {",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (vizContentFrame) {",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.configFrame) {",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axisMappingConfig) {",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (currentState.enhancedConfig.axisMapping) {",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingGui =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collapsibleFrame =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizCollapsibleFrame =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parentFrame =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scrollFrame =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const globalSettings =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypes =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypes =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerGrid =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualizationControls =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const statusLabel =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parent =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const buttonYOffset =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const axisMappingConfig =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentState =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state =",
          "file": "client/services/configGui/makeConfigGui.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const screenGui =",
          "file": "client/services/configGui/makeConfigGui.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/stateManager.ts",
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "naming",
          "message": "Function name 'function\n    return' should be camelCase",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.spacing) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualization) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.axisMapping) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualMapping) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.yAxisConfig) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.numPetTypes) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.enhancedConfig.spacing) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.enhancedConfig.visualization) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (shouldUpdateYAxis) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (currentVisualMapping.backgroundColor === \"None\" || currentVisualMapping.backgroundColor === \"none\") {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (httpMethodIndex !== -1) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.axisMapping) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axis === \"xAxis\") {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axis === \"zAxis\") {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualMapping) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i !== index) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.gui) {",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const axisMapping =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualMapping =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisConfig =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualization =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentMapping =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shouldUpdateYAxis =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentVisualMapping =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const httpMethodIndex =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index =",
          "file": "client/services/configGui/stateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentState =",
          "file": "client/services/configGui/stateManager.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/utilities.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (numValue !== undefined && numValue >= min && numValue <= max) {",
          "file": "client/services/configGui/utilities.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (originalColor) {",
          "file": "client/services/configGui/utilities.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validation.isValid) {",
          "file": "client/services/configGui/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numValue =",
          "file": "client/services/configGui/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const originalColor =",
          "file": "client/services/configGui/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validation =",
          "file": "client/services/configGui/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const originalColor =",
          "file": "client/services/configGui/utilities.ts"
        }
      ]
    },
    {
      "file": "client/services/configGui/validationHandlers.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.numNodeTypes < 1 || config.numNodeTypes > 10) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.numLinkTypes < 1 || config.numLinkTypes > 10) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!layerResult.isValid) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.spacing) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!spacingResult.isValid) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.numNodes < 1 || layer.numNodes > GUI_CONSTANTS.VALIDATION.MAX_NODES_PER_LAYER) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.connectionsPerNode < 0 || layer.connectionsPerNode > GUI_CONSTANTS.VALIDATION.MAX_CONNECTIONS_PER_NODE) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of fields) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (field.value < field.min || field.value > field.max) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (numValue === undefined) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (numValue < min || numValue > max) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!result.isValid) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (totalNodes > GUI_CONSTANTS.VALIDATION.MAX_TOTAL_NODES) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (totalConnections > GUI_CONSTANTS.VALIDATION.MAX_TOTAL_CONNECTIONS) {",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer =",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerResult =",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingResult =",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numValue =",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result =",
          "file": "client/services/configGui/validationHandlers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer =",
          "file": "client/services/configGui/validationHandlers.ts"
        }
      ]
    },
    {
      "file": "client/services/keyboardShortcuts.service.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.KeyCode === Enum.KeyCode.Escape) {",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.KeyCode === Enum.KeyCode.P && this.escPressed) {",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (timeSinceEsc <= KEYBOARD_CONSTANTS.ESC_TIMEOUT / 1000) {",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (player) {",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const inputConnection =",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const timeSinceEsc =",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui =",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui =",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const confirmConnection =",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cancelConnection =",
          "file": "client/services/keyboardShortcuts.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/services/keyboardShortcuts.service.ts"
        }
      ]
    },
    {
      "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!NodePropertiesInspectorService.instance) {",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node) {",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.currentNode.properties) {",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.panel) {",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.panel) {",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.clickConnection) {",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.gui) {",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mouse =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const model =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guid =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const workspace =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMaker =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const props =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const attributes =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const props =",
          "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        }
      ]
    },
    {
      "file": "server/main.server.ts",
      "issues": []
    },
    {
      "file": "server/services/colorsTest.service.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (success && brickColor) {",
          "file": "server/services/colorsTest.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.testFolder) {",
          "file": "server/services/colorsTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xOffset =",
          "file": "server/services/colorsTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position =",
          "file": "server/services/colorsTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block =",
          "file": "server/services/colorsTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block =",
          "file": "server/services/colorsTest.service.ts"
        }
      ]
    },
    {
      "file": "server/services/configGUIServer.service.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteEvent) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteValidation.isValid) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cluster && cluster.discoveredProperties) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"clearGraph\") {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (graphMakerFolder) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (flatBlock) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.unifiedRenderer && \"destroy\" in this.unifiedRenderer) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (renderer.destroy) {",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let remoteEvent =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventConnection =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteValidation =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMakerFolder =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const flatBlock =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterOrVoid =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage =",
          "file": "server/services/configGUIServer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const renderer =",
          "file": "server/services/configGUIServer.service.ts"
        }
      ]
    },
    {
      "file": "server/services/graphInitializer.service.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.configGUIServer) {",
          "file": "server/services/graphInitializer.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteEvent) {",
          "file": "server/services/graphInitializer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const players =",
          "file": "server/services/graphInitializer.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteEvent =",
          "file": "server/services/graphInitializer.service.ts"
        }
      ]
    },
    {
      "file": "server/services/groupAnimationTest.service.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.remoteEvent) {",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < count; i++) {",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"triggerAnimation\" && !this.isAnimating) {",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (primaryPart) {",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.testFolder) {",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yOffset =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventType =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetPositions =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetPos =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offset =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const newPosition =",
          "file": "server/services/groupAnimationTest.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const tween =",
          "file": "server/services/groupAnimationTest.service.ts"
        }
      ]
    },
    {
      "file": "server/services/main/dev2features.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (RUN_ANIMATION_TEST) {",
          "file": "server/services/main/dev2features.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (RUN_COLORS_TEST) {",
          "file": "server/services/main/dev2features.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const RUN_ANIMATION_TEST =",
          "file": "server/services/main/dev2features.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const RUN_COLORS_TEST =",
          "file": "server/services/main/dev2features.ts"
        }
      ]
    },
    {
      "file": "server/services/main/game.service.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.gameStarted) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.myStuffFolder) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (true) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (barPart) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (surfaceGui) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (textLabel) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (httpMethod) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (attrValue !== undefined) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n            name === \"ZParallel_Lane_httpMethod_GET\" ||\n            name === \"ZParallel_Lane_httpMethod_POST\" ||\n            name === \"ZParallel_Lane_httpMethod_PUT\" ||\n            name === \"ZParallel_Lane_httpMethod_MULTIPLE\" ||\n            name === \"ZParallel_Lane_httpMethod_UNKNOWN\"\n          ) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n              name === \"XParallel_Lane_apiPattern_controller\" ||\n              name === \"XParallel_Lane_apiPattern_crud-operation\" ||\n              name === \"XParallel_Lane_apiPattern_data-model\" ||\n              name === \"XParallel_Lane_apiPattern_dependency-injection\" ||\n              name === \"XParallel_Lane_apiPattern_general-api\"\n            ) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodesFolder && propertyValue) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n            name === \"VerticalWall_Back\" ||\n            name === \"VerticalWall_Right\" ||\n            name === \"VerticalWall_Front\" ||\n            name === \"VerticalWall_Left\" ||\n            name === \"FarZEdgeWall\" ||\n            name === \"FarXEdgeWall\"\n          ) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.configGUIServer) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (initializer.destroy) {",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const searchFolder =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guidA =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guidB =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numA =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numB =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guid =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeName =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeType =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let nodeInfo =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allChildren =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bars =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barPart =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barColor =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barColor =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bar =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const surfaceGui =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabel =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textColor =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const httpMethod =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const attrValue =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const searchForLanes =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const name =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const name =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const match =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const searchForWalls =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const name =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const size =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const transparency =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const material =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const canCollide =",
          "file": "server/services/main/game.service.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const initializer =",
          "file": "server/services/main/game.service.ts"
        }
      ]
    },
    {
      "file": "shared/constants/axisDefaults.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (httpMethodIndex !== -1) {",
          "file": "shared/constants/axisDefaults.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const httpMethodIndex =",
          "file": "shared/constants/axisDefaults.ts"
        }
      ]
    },
    {
      "file": "shared/data/tempHarnessLinks.ts",
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'with' should be PascalCase",
          "file": "shared/data/tempHarnessLinks.ts"
        }
      ]
    },
    {
      "file": "shared/data/tempHarnessTestData.ts",
      "issues": []
    },
    {
      "file": "shared/data/tempTestData.ts",
      "issues": []
    },
    {
      "file": "shared/interfaces/IMaker.ts",
      "issues": []
    },
    {
      "file": "shared/interfaces/IService.ts",
      "issues": []
    },
    {
      "file": "shared/interfaces/enhancedGenerator.interface.ts",
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase",
          "file": "shared/interfaces/enhancedGenerator.interface.ts"
        }
      ]
    },
    {
      "file": "shared/interfaces/nodeTypes.ts",
      "issues": []
    },
    {
      "file": "shared/interfaces/simpleDataGenerator.interface.ts",
      "issues": []
    },
    {
      "file": "shared/modules/TextBoxMaker.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (borderColor) {",
          "file": "shared/modules/TextBoxMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bgColor =",
          "file": "shared/modules/TextBoxMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const defaultBackgroundColor =",
          "file": "shared/modules/TextBoxMaker.ts"
        }
      ]
    },
    {
      "file": "shared/modules/TextLabelMaker.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (borderColor) {",
          "file": "shared/modules/TextLabelMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bgColor =",
          "file": "shared/modules/TextLabelMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const defaultBackgroundColor =",
          "file": "shared/modules/TextLabelMaker.ts"
        }
      ]
    },
    {
      "file": "shared/modules/barMaker/barMaker.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (parent) {",
          "file": "shared/modules/barMaker/barMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barLength =",
          "file": "shared/modules/barMaker/barMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const frontFaceOffset =",
          "file": "shared/modules/barMaker/barMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const backFaceOffset =",
          "file": "shared/modules/barMaker/barMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barName =",
          "file": "shared/modules/barMaker/barMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const frontAttachment =",
          "file": "shared/modules/barMaker/barMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const backAttachment =",
          "file": "shared/modules/barMaker/barMaker.ts"
        }
      ]
    },
    {
      "file": "shared/modules/barMaker/constants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/barMaker/index.ts",
      "issues": []
    },
    {
      "file": "shared/modules/barMaker/interfaces.ts",
      "issues": []
    },
    {
      "file": "shared/modules/barMaker/standardizedInterfaces.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.position) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.rotation) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Size) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Color) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Material) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Transparency !== undefined) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Anchored !== undefined) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.TopSurface) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.BottomSurface) {",
          "file": "shared/modules/barMaker/standardizedInterfaces.ts"
        }
      ]
    },
    {
      "file": "shared/modules/barMaker/utilities.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackStr =",
          "file": "shared/modules/barMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexStr =",
          "file": "shared/modules/barMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barStr =",
          "file": "shared/modules/barMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const attStr =",
          "file": "shared/modules/barMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexStr =",
          "file": "shared/modules/barMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackStr =",
          "file": "shared/modules/barMaker/utilities.ts"
        }
      ]
    },
    {
      "file": "shared/modules/hexStackMaker/constants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/hexStackMaker/hexStackMaker.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let level = 0; level < count; level++) {",
          "file": "shared/modules/hexStackMaker/hexStackMaker.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (parent) {",
          "file": "shared/modules/hexStackMaker/hexStackMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const DEFAULT_COLOR_PALETTE =",
          "file": "shared/modules/hexStackMaker/hexStackMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const colorPalette =",
          "file": "shared/modules/hexStackMaker/hexStackMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackName =",
          "file": "shared/modules/hexStackMaker/hexStackMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const levelPosition =",
          "file": "shared/modules/hexStackMaker/hexStackMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const levelColor =",
          "file": "shared/modules/hexStackMaker/hexStackMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexModel =",
          "file": "shared/modules/hexStackMaker/hexStackMaker.ts"
        }
      ]
    },
    {
      "file": "shared/modules/hexStackMaker/index.ts",
      "issues": []
    },
    {
      "file": "shared/modules/hexStackMaker/interfaces.ts",
      "issues": []
    },
    {
      "file": "shared/modules/hexStackMaker/standardizedInterfaces.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.centerPosition) {",
          "file": "shared/modules/hexStackMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.colors) {",
          "file": "shared/modules/hexStackMaker/standardizedInterfaces.ts"
        }
      ]
    },
    {
      "file": "shared/modules/hexStackMaker/utilities.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackStr =",
          "file": "shared/modules/hexStackMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const levelY =",
          "file": "shared/modules/hexStackMaker/utilities.ts"
        }
      ]
    },
    {
      "file": "shared/modules/hexagonMaker/constants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/hexagonMaker/hexagonMaker.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (guid) {",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < HEXAGON_CONSTANTS.NUM_BARS; i++) {",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (parent) {",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const dimensions =",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagonName =",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerCube =",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const rotation =",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yOffset =",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bar =",
          "file": "shared/modules/hexagonMaker/hexagonMaker.ts"
        }
      ]
    },
    {
      "file": "shared/modules/hexagonMaker/index.ts",
      "issues": []
    },
    {
      "file": "shared/modules/hexagonMaker/interfaces.ts",
      "issues": []
    },
    {
      "file": "shared/modules/hexagonMaker/standardizedInterfaces.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.centerPosition) {",
          "file": "shared/modules/hexagonMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.barProps) {",
          "file": "shared/modules/hexagonMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.barProps.Color) {",
          "file": "shared/modules/hexagonMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.barProps.Material) {",
          "file": "shared/modules/hexagonMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.barProps.Transparency !== undefined) {",
          "file": "shared/modules/hexagonMaker/standardizedInterfaces.ts"
        }
      ]
    },
    {
      "file": "shared/modules/hexagonMaker/utilities.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexStr =",
          "file": "shared/modules/hexagonMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackStr =",
          "file": "shared/modules/hexagonMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const radius =",
          "file": "shared/modules/hexagonMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barLength =",
          "file": "shared/modules/hexagonMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barWidth =",
          "file": "shared/modules/hexagonMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barHeight =",
          "file": "shared/modules/hexagonMaker/utilities.ts"
        }
      ]
    },
    {
      "file": "shared/modules/labelBlockMaker/constants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/labelBlockMaker/index.ts",
      "issues": []
    },
    {
      "file": "shared/modules/labelBlockMaker/interfaces.ts",
      "issues": []
    },
    {
      "file": "shared/modules/labelBlockMaker/labelBlockMaker.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (parent) {",
          "file": "shared/modules/labelBlockMaker/labelBlockMaker.ts"
        }
      ]
    },
    {
      "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.position) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.rotation) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Size !== undefined) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Color) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Material) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Transparency !== undefined) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Anchored !== undefined) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.CastShadow !== undefined) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.labels) {",
          "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
        }
      ]
    },
    {
      "file": "shared/modules/labelBlockMaker/utilities.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (labelConfig) {",
          "file": "shared/modules/labelBlockMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (labelConfig.text) {",
          "file": "shared/modules/labelBlockMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n          mergedConfig.textSize !== undefined ||\n          mergedConfig.backgroundColor !== undefined ||\n          mergedConfig.textColor !== undefined ||\n          mergedConfig.font !== undefined ||\n          mergedConfig.borderSizePixel !== undefined ||\n          mergedConfig.borderColor !== undefined ||\n          mergedConfig.textWrapped !== undefined\n        ) {",
          "file": "shared/modules/labelBlockMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelConfig =",
          "file": "shared/modules/labelBlockMaker/utilities.ts"
        }
      ]
    },
    {
      "file": "shared/modules/labelGroupMaker.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < 3; i++) {",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i === 1) {",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const str =",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let result =",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const midpoint =",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const direction =",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockLength =",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const startOffset =",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockPosition =",
          "file": "shared/modules/labelGroupMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const lookAtCFrame =",
          "file": "shared/modules/labelGroupMaker.ts"
        }
      ]
    },
    {
      "file": "shared/modules/makeOriginBlock.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block =",
          "file": "shared/modules/makeOriginBlock.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/baseBlockCreator.ts",
      "issues": [
        {
          "type": "naming",
          "message": "Class name 'for' should be PascalCase",
          "file": "shared/modules/renderers/blocks/baseBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.canCollide !== undefined) {",
          "file": "shared/modules/renderers/blocks/baseBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width =",
          "file": "shared/modules/renderers/blocks/baseBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth =",
          "file": "shared/modules/renderers/blocks/baseBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/blocks/baseBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ =",
          "file": "shared/modules/renderers/blocks/baseBlockCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWidth =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeDepth =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalWidth =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalDepth =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ =",
          "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isZAxis) {",
          "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (face === Enum.NormalId.Top && !isZAxis) {",
          "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlanePos =",
          "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneSize =",
          "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const endcapWidth =",
          "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const endcapHeight =",
          "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const endcap =",
          "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/index.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/blocks/platformBlockCreator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const platformBlock =",
          "file": "shared/modules/renderers/blocks/platformBlockCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!bounds) {",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (blocksMap) {",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlock =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMinZ =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMaxZ =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collectiveCenter =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneId =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockName =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const adjustedZPosition =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isXParallel =",
          "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isZParallel && face === Enum.NormalId.Front) {",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneId =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockName =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimLaneBlock =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const dimensions =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockName =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allShadowBlocks =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isZParallel =",
          "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (shadowWidth !== undefined && shadowDepth !== undefined) {",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yGroupBounds =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadow =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yValue =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let currentY =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallPosition =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const padding =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeHeight =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowHeight =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadow =",
          "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/constants/blockConstants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/constants/index.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/constants/labelConstants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/constants/layoutConstants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/constants/positionConstants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/constants/robloxColors.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/constants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!showConnectors) {",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (sourceHex && targetHex) {",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (sourceAttachment && targetAttachment) {",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (showLinkLabels) {",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!attachment) {",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!centerCube) {",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const child of children) {",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (textLabel) {",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showConnectors =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showLinkLabels =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceHex =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetHex =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceAttachment =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetAttachment =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const beam =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelParent =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let attachment =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let centerCube =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const children =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const beam =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const diameter =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const brickColor =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color3 =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const relationName =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabels =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const firstLabel =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabel =",
          "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/flatBlockCreator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWidth =",
          "file": "shared/modules/renderers/flatBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeDepth =",
          "file": "shared/modules/renderers/flatBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width =",
          "file": "shared/modules/renderers/flatBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth =",
          "file": "shared/modules/renderers/flatBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const minSize =",
          "file": "shared/modules/renderers/flatBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalWidth =",
          "file": "shared/modules/renderers/flatBlockCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalDepth =",
          "file": "shared/modules/renderers/flatBlockCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/propertyValueResolver.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (extractor) {",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (error) {",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties?.type) {",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.type !== \"Animals\" || !node.properties) {",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const extractor =",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const properties =",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const ranges =",
          "file": "shared/modules/renderers/propertyValueResolver.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node => {\n      if (!node.position) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (minX === POSITION_CONSTANTS.BOUNDS.INITIAL_MIN) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (minX === POSITION_CONSTANTS.BOUNDS.INITIAL_MIN) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!cluster) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!cluster.groups[0].nodes) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerNumber === 1 && nextLayerNodes) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!linkExists) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (count === 0) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (targetNode) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasBackwardConnection) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const candidateNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkExists =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const otherNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasBackwardConnection =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < layer.numNodes; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"man\" || nodeTypeName === \"woman\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"child\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"grandparent\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (properties) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (propName === propertyName && propValue !== undefined) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!found) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentCount =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const valueType =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const properties =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let found =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isValid =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const coverage =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const analysis =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const coverage =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validation =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const uniqueValuesSet =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const uniqueValuesCount =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxItems =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validHarnessLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.useTestData) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.layerNumber === 1 && nextLayerNodes) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasBackwardConnection) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < layer.numNodes; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"man\" || nodeTypeName === \"woman\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"child\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"grandparent\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!linkExists) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (count === 0) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (targetNode) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasBackwardConnection =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const candidateNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkExists =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const otherNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxItems =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validHarnessLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < layer.numNodes; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"man\" || nodeTypeName === \"woman\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"child\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"grandparent\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerNumber === 1 && nextLayerNodes) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!linkExists) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (count === 0) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (targetNode) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasBackwardConnection) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.useTestData) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const candidateNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkExists =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const otherNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasBackwardConnection =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxItems =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validHarnessLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < layer.numNodes; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"man\" || nodeTypeName === \"woman\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"child\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"grandparent\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerNumber === 1 && nextLayerNodes) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!linkExists) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (count === 0) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (targetNode) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasBackwardConnection) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.useTestData) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const candidateNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkExists =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const otherNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasBackwardConnection =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxItems =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validHarnessLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let layer = 1; layer <= numLayers; layer++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countA =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countB =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let layer = 1; layer <= numLayers; layer++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let layer = 1; layer <= numLayers; layer++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let checkLayer = 1; checkLayer <= numLayers; checkLayer++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isYAxis) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yOffset =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const minFinalY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const groundClearanceAdjustment =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalOffsetY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numLayers =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProperties =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sortedTypes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeXPositions =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countA =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countB =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeXPositions =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zPositionMap =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisFromMapping =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const useLayerForY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPositionMap =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const baseX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const checkKey =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const checkNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centeringOffset =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const x =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const z =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const y =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeCounter =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const paddedNumber =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithType =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node => {\n      if (!node.position) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (groundClearanceAdjustment > 0) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxNodesInLayer =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const minFinalY =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const groundClearanceAdjustment =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const paddedNumber =",
          "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/index.ts",
      "issues": [
        {
          "type": "naming",
          "message": "Class name 'and' should be PascalCase",
          "file": "shared/modules/renderers/unifiedDataRenderer/index.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
      "issues": []
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zParallelLanes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xParallelLanes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allLaneBounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeRadius =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const oldMinX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const oldMaxX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let overallMinZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let overallMaxZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const commonCenterZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zBuffer =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockDepth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlockTop =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockYPosition =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const colors =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneBlock =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let fullMinX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let fullMaxX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlockTop =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPosition =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfDepth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfDepth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMinZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMaxZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collectiveCenter =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingPlatform) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingBlock) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const platform =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadow =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingPlatform =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingBlock =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!config.axisMapping?.yAxis || config.axisMapping.yAxis === \"none\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallHeight =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const walls =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!config.axisMapping?.yAxis || config.axisMapping.yAxis === \"none\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!graphMakerFolder) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!clusterFolder) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMakerFolder =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterFolder =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yParallelShadows =",
          "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (swimlaneBlock) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (swimlaneBlock) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axis === \"X\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneBlock =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneBlock =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelX =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingGraphMaker) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (showNodes && config?.visualization?.showConnectors !== false) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isPersonNode && node.properties?.age) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.type === \"Animals\" && node.properties?.animalType) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerMatch) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingGraphMaker =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeToHexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeToHexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const WIDTH =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const HEIGHT =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labels =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const backgroundColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const borderColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const fullName =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerMatch =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeIdx =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (match) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < newLayer.numNodes; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i < newLayer.numNodes) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerNum > newLayerCount) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (hexagon && node.position) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties?.animalType) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentNodesByLayer =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentNodesByLayer =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const match =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const matchA =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const matchB =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const indexA =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const indexB =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentPos =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offset =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const WIDTH =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const HEIGHT =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeIndex =",
          "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/types.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const data =",
          "file": "shared/modules/renderers/unifiedDataRenderer/types.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const data =",
          "file": "shared/modules/renderers/unifiedDataRenderer/types.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const data =",
          "file": "shared/modules/renderers/unifiedDataRenderer/types.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingPlatform) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingBlock) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (zAxisOffset !== 0) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (swimlane) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!graphMakerFolder || !this.currentConfig) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!clusterFolder) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!nodesFolder || !linksFolder) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingPlatform =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingBlock =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeCount =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetOrigin =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisOffset =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneResult =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xParallelModel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zParallelModel =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlane =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMakerFolder =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterFolder =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linksFolder =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xBounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zBounds =",
          "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (propertyName === \"type\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (propertyName === \"age\" && node.properties?.age !== undefined) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties && propertyName in node.properties) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value in scheme) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\"default\" in scheme) {",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!visualMapping || visualMapping.backgroundColor === \"none\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!visualMapping || visualMapping.borderColor === \"none\") {",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const age =",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scheme =",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappedColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue =",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const brightness =",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textColor =",
          "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/verticalWallCreator.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const platformWidth =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const platformDepth =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowHeight =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowY =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallX =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallY =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallZ =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallX =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallY =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallZ =",
          "file": "shared/modules/renderers/verticalWallCreator.ts"
        }
      ]
    },
    {
      "file": "shared/modules/ropeLabelMaker/constants.ts",
      "issues": []
    },
    {
      "file": "shared/modules/ropeLabelMaker/index.ts",
      "issues": []
    },
    {
      "file": "shared/modules/ropeLabelMaker/interfaces.ts",
      "issues": []
    },
    {
      "file": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parsedRelation =",
          "file": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelGroup =",
          "file": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts"
        }
      ]
    },
    {
      "file": "shared/modules/ropeLabelMaker/utilities.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!relationName) {",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (splitIndex && splitIndex[0] !== undefined) {",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const splitPattern =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const splitIndex =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const beforeIndex =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const afterIndex =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const source =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceFormatted =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetFormatted =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const pos1 =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const pos2 =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const midpoint =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts =",
          "file": "shared/modules/ropeLabelMaker/utilities.ts"
        }
      ]
    },
    {
      "file": "shared/services/base/BaseService.ts",
      "issues": [
        {
          "type": "naming",
          "message": "Class name 'for' should be PascalCase",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "naming",
          "message": "Class name 'and' should be PascalCase",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "naming",
          "message": "Class name 'cleanup' should be PascalCase",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.isDestroyed) {",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.isDestroyed) {",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i !== index) {",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (e) {",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (instance => {\n      try {\n        if (instance && instance.Parent) {",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (e) {",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.isDestroyed) {",
          "file": "shared/services/base/BaseService.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index =",
          "file": "shared/services/base/BaseService.ts"
        }
      ]
    },
    {
      "file": "shared/utils/nodePropertyHelpers.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!node.properties) {",
          "file": "shared/utils/nodePropertyHelpers.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (propertyName === \"type\") {",
          "file": "shared/utils/nodePropertyHelpers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const age =",
          "file": "shared/utils/nodePropertyHelpers.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/utils/nodePropertyHelpers.ts"
        }
      ]
    },
    {
      "file": "shared/utils/propertyDiscovery.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties) {",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const objWithProps =",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const props =",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const topLevel =",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/utils/propertyDiscovery.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/utils/propertyDiscovery.ts"
        }
      ]
    },
    {
      "file": "shared/utils/stringUtils.ts",
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const str =",
          "file": "shared/utils/stringUtils.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let result =",
          "file": "shared/utils/stringUtils.ts"
        }
      ]
    },
    {
      "file": "shared/utils/validation/arrayValidation.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.itemValidator) {",
          "file": "shared/utils/validation/arrayValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < maxSize; i++) {",
          "file": "shared/utils/validation/arrayValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const arr =",
          "file": "shared/utils/validation/arrayValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxSize =",
          "file": "shared/utils/validation/arrayValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node =",
          "file": "shared/utils/validation/arrayValidation.ts"
        }
      ]
    },
    {
      "file": "shared/utils/validation/configValidation.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!layersResult.isValid) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of layerErrors) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.spacing) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of spacingErrors) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.visualization) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of vizErrors) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.axisMapping || cfg.spatialGrouping) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of mappingErrors) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.spatialGrouping) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.axisMapping) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.visualMapping) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of visualMappingErrors) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.yAxisConfig) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of yAxisErrors) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.numPetTypes !== undefined) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.maxDataItems !== undefined) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of numericFields) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of booleanFields) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasOldNames && !hasNewNames) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of stringFields) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of stringFields) {",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cfg =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layersResult =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerErrors =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingErrors =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizErrors =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingConfig =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingErrors =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualMappingErrors =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisErrors =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const prefix =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingObj =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizObj =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingObj =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasOldNames =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasNewNames =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingObj =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configObj =",
          "file": "shared/utils/validation/configValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result =",
          "file": "shared/utils/validation/configValidation.ts"
        }
      ]
    },
    {
      "file": "shared/utils/validation/index.ts",
      "issues": []
    },
    {
      "file": "shared/utils/validation/stringValidation.ts",
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input === undefined) {",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.allowEmpty) {",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.trimWhitespace) {",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.blockSpecialChars) {",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.customPattern) {",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.blockSpecialChars) {",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!result.isValid) {",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let sanitized =",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxLength =",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result =",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result =",
          "file": "shared/utils/validation/stringValidation.ts"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let result =",
          "file": "shared/utils/validation/stringValidation.ts"
        }
      ]
    }
  ],
  "duplicates": [
    {
      "pattern": "{ button.BackgroundColor3 = GUI_CONSTANTS.COLORS.BUTTON.HOVER; }...",
      "files": [
        "client/services/configGui/componentFactory.ts",
        "client/services/configGui/componentFactory.ts"
      ]
    },
    {
      "pattern": "{ layers[index].config = updatedConfig; notifyLayerChange(); }...",
      "files": [
        "client/services/configGui/components/layerGrid.ts",
        "client/services/configGui/components/layerGrid.ts"
      ]
    },
    {
      "pattern": "{ row.config.layerNumber = idx + 1; updateLayerNumber(row.frame, idx + 1); }...",
      "files": [
        "client/services/configGui/components/layerGrid.ts",
        "client/services/configGui/components/layerGrid.ts"
      ]
    },
    {
      "pattern": "{ parent: Frame; spacing: SpacingConfig; onSpacingChange: (field: keyof SpacingConfig, value: number...",
      "files": [
        "client/services/configGui/components/globalSettings.ts",
        "client/services/configGui/components/spacingControls.ts"
      ]
    },
    {
      "pattern": "{ text: string; parent: Frame; position?: UDim2; size?: UDim2; }...",
      "files": [
        "client/services/configGui/componentFactory.ts",
        "client/services/configGui/components/title.ts"
      ]
    },
    {
      "pattern": "{ parent, useLayerForYAxis, yAxisProperty, onYAxisModeChange, onYAxisPropertyChange }...",
      "files": [
        "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
        "client/services/configGui/components/yAxisControls.ts"
      ]
    },
    {
      "pattern": "{ optionButton.BackgroundColor3 = new Color3(0.3, 0.3, 0.3); optionButton.TextColor3 = new Color3(1,...",
      "files": [
        "client/services/configGui/components/visualCustomizationControls.ts",
        "client/services/configGui/components/yAxisControls.ts"
      ]
    },
    {
      "pattern": "{ optionButton.BackgroundColor3 = new Color3(0.1, 0.1, 0.1); optionButton.TextColor3 = new Color3(0....",
      "files": [
        "client/services/configGui/components/visualCustomizationControls.ts",
        "client/services/configGui/components/yAxisControls.ts"
      ]
    },
    {
      "pattern": "{ dropdownButton.Text = property + \" ▼\"; dropdownList.Visible = false; onValueChange(property); }...",
      "files": [
        "client/services/configGui/components/visualCustomizationControls.ts",
        "client/services/configGui/components/yAxisControls.ts"
      ]
    },
    {
      "pattern": "{ closeConnection.Disconnect(); closeConnection = undefined; }...",
      "files": [
        "client/services/configGui/components/visualCustomizationControls.ts",
        "client/services/configGui/components/yAxisControls.ts"
      ]
    },
    {
      "pattern": "{ closeConnection.Disconnect(); closeConnection = undefined; }...",
      "files": [
        "client/services/configGui/components/visualCustomizationControls.ts",
        "client/services/configGui/components/yAxisControls.ts"
      ]
    },
    {
      "pattern": "{ this.updateStatusMessage(validationResult.error || \"Invalid configuration\", true); return; }...",
      "files": [
        "client/services/configGui/eventHandlers.ts",
        "client/services/configGui/eventHandlers.ts"
      ]
    },
    {
      "pattern": "{ this.updateStatusMessage(\"No layers configured!\", true); return; }...",
      "files": [
        "client/services/configGui/eventHandlers.ts",
        "client/services/configGui/eventHandlers.ts"
      ]
    },
    {
      "pattern": "{ nodeHeight: GUI_CONSTANTS.SPACING_DEFAULTS.NODE_HEIGHT, nodeRadius: GUI_CONSTANTS.SPACING_DEFAULTS...",
      "files": [
        "client/services/configGui/stateManager.ts",
        "client/services/configGui/stateManager.ts"
      ]
    },
    {
      "pattern": "{ showNodes: true, showLinkLabels: false, showConnectors: true, allowSameLevelLinks: false }...",
      "files": [
        "client/services/configGui/stateManager.ts",
        "client/services/configGui/stateManager.ts"
      ]
    },
    {
      "pattern": "{ this.confirmationGui.Destroy(); this.confirmationGui = undefined; }...",
      "files": [
        "client/services/keyboardShortcuts.service.ts",
        "client/services/keyboardShortcuts.service.ts"
      ]
    },
    {
      "pattern": "{ this.confirmationGui.Destroy(); this.confirmationGui = undefined; }...",
      "files": [
        "client/services/keyboardShortcuts.service.ts",
        "client/services/keyboardShortcuts.service.ts"
      ]
    },
    {
      "pattern": "{ this.testFolder.Destroy(); this.testFolder = undefined; }...",
      "files": [
        "server/services/colorsTest.service.ts",
        "server/services/groupAnimationTest.service.ts"
      ]
    },
    {
      "pattern": "{ part: Part; face: Enum.NormalId; text: string; parent?: Instance; backgroundColor?: Color3; border...",
      "files": [
        "shared/modules/TextBoxMaker.ts",
        "shared/modules/TextLabelMaker.ts"
      ]
    },
    {
      "pattern": "{ part, face, text, parent, backgroundColor, borderColor, textColor }...",
      "files": [
        "shared/modules/TextBoxMaker.ts",
        "shared/modules/TextLabelMaker.ts"
      ]
    },
    {
      "pattern": "{ part, face, text, textSize = 24, backgroundColor, textColor = new Color3(0, 0, 0), font = Enum.Fon...",
      "files": [
        "shared/modules/TextBoxMaker.ts",
        "shared/modules/TextLabelMaker.ts"
      ]
    },
    {
      "pattern": "{ textSize?: number; backgroundColor?: Color3; textColor?: Color3; font?: Enum.Font; borderSizePixel...",
      "files": [
        "shared/modules/TextBoxMaker.ts",
        "shared/modules/TextLabelMaker.ts"
      ]
    },
    {
      "pattern": "{ config.position = new Vector3( legacy.centerPosition[0], legacy.centerPosition[1], legacy.centerPo...",
      "files": [
        "shared/modules/hexStackMaker/standardizedInterfaces.ts",
        "shared/modules/hexagonMaker/standardizedInterfaces.ts"
      ]
    },
    {
      "pattern": "{ text: string; textColor?: Color3; backgroundColor?: Color3; borderColor?: Color3; }...",
      "files": [
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
      ]
    },
    {
      "pattern": "{ textSize?: number; font?: Enum.Font; borderSizePixel?: number; }...",
      "files": [
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
      ]
    },
    {
      "pattern": "{ config.position = new Vector3( legacy.position.x, legacy.position.y, legacy.position.z ); }...",
      "files": [
        "shared/modules/barMaker/standardizedInterfaces.ts",
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
      ]
    },
    {
      "pattern": "{ config.rotation = new Vector3( legacy.rotation.x, legacy.rotation.y, legacy.rotation.z ); }...",
      "files": [
        "shared/modules/barMaker/standardizedInterfaces.ts",
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
      ]
    },
    {
      "pattern": "{ config.color = new Color3( legacy.props.Color[0], legacy.props.Color[1], legacy.props.Color[2] ); ...",
      "files": [
        "shared/modules/barMaker/standardizedInterfaces.ts",
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
      ]
    },
    {
      "pattern": "{ config.material = legacy.props.Material as unknown as Enum.Material; }...",
      "files": [
        "shared/modules/barMaker/standardizedInterfaces.ts",
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
      ]
    },
    {
      "pattern": "{ config.transparency = legacy.props.Transparency; }...",
      "files": [
        "shared/modules/barMaker/standardizedInterfaces.ts",
        "shared/modules/labelBlockMaker/standardizedInterfaces.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/blocks/shadowBlockCreator.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/blocks/shadowBlockCreator.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
      ]
    },
    {
      "pattern": "{ Front: new Color3(1, 0, 0), // Red Back: new Color3(0, 1, 0), // Green Left: new Color3(0, 0, 1), ...",
      "files": [
        "shared/modules/renderers/blocks/shadowBlockCreator.ts",
        "shared/modules/renderers/blocks/swimlaneBlockCreator.ts"
      ]
    },
    {
      "pattern": "{ position: Vector3; width: number; depth: number; height: number; color: Color3; typeName: string; ...",
      "files": [
        "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
        "shared/modules/renderers/flatBlockCreator.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/flatBlockCreator.ts"
      ]
    },
    {
      "pattern": "{ discoverNodeProperties, filterValidAxisProperties, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts"
      ]
    },
    {
      "pattern": "{ ANIMAL_TYPES, COLOR_PALETTES, COUNTRIES_OF_BIRTH, COUNTRIES_OF_RESIDENCE, DEFAULT_ATTACHMENTS, FIR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ discoverNodeProperties, filterValidAxisProperties, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ const sourceNode = currentLayerNodes[math.random(0, currentLayerNodes.size() - 1)]; const link = t...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ const node = this.createNode(i, layer.layerNumber, config); layerNodes.push(node); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(18, 80), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLOR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(5, 17), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLORS...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(65, 95), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLOR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ animalType: ANIMAL_TYPES[math.random(0, ANIMAL_TYPES.size() - 1)], }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ this.generateInterLayerLink( sourceNode, nextLayerNodes, config, allLinks ); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ ...layer, connectionsPerNode: math.max(1, layer.connectionsPerNode), }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ const targetNode = shuffled[i]; const link = this.createLink(sourceNode, targetNode, config); allL...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ const link = this.createLink(sourceNode, targetNode, config); allLinks.push(link); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ const j = math.random(0, i); [array[i], array[j]] = [array[j], array[i]]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ nodeConnections.set( link.sourceNodeUuid, (nodeConnections.get(link.sourceNodeUuid) || 0) + 1 ); n...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ const node = nodes.find((n) => n.uuid === uuid); if (node) isolatedNodes.push(node); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ return sameTypeNodes[math.random(0, sameTypeNodes.size() - 1)]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ return otherNodes[math.random(0, otherNodes.size() - 1)]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ service: file.service, component: file.component, language: file.language, size: file.size, type: ...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ uuid: link.uuid, type: link.type, sourceNodeUuid: link.sourceNodeUuid, targetNodeUuid: link.target...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ id: \"harness-group\", name: \"Harness Data Group\", nodes: harnessNodes, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ groups: [mainGroup], relations: harnessLinks, discoveredProperties: validProps, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ // This prevents lint errors while keeping the code available return \"\"; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ // This prevents lint errors while keeping the code available return [0, 0, 0]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ platform: [0.2, 0.4, 0.8], ci: [0.8, 0.4, 0.2], cd: [0.2, 0.8, 0.2], ce: [0.8, 0.2, 0.8], core: [0...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts"
      ]
    },
    {
      "pattern": "{ ANIMAL_TYPES, COLOR_PALETTES, COUNTRIES_OF_BIRTH, COUNTRIES_OF_RESIDENCE, DEFAULT_ATTACHMENTS, FIR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ discoverNodeProperties, filterValidAxisProperties, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ const node = this.createNode(i, layer.layerNumber, config); layerNodes.push(node); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(18, 80), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLOR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(5, 17), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLORS...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(65, 95), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLOR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ animalType: ANIMAL_TYPES[math.random(0, ANIMAL_TYPES.size() - 1)], }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ this.ensureBackwardConnections(currentLayerNodes, nextLayerNodes, config, allLinks); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ this.generateInterLayerLink( sourceNode, nextLayerNodes, config, allLinks ); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ const targetNode = shuffled[i]; const link = this.createLink(sourceNode, targetNode, config); allL...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ const link = this.createLink(sourceNode, targetNode, config); allLinks.push(link); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ nodeConnections.set( link.sourceNodeUuid, (nodeConnections.get(link.sourceNodeUuid) || 0) + 1 ); n...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ const node = nodes.find((n) => n.uuid === uuid); if (node) isolatedNodes.push(node); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ const j = math.random(0, i); [array[i], array[j]] = [array[j], array[i]]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ return sameTypeNodes[math.random(0, sameTypeNodes.size() - 1)]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ return otherNodes[math.random(0, otherNodes.size() - 1)]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ const sourceNode = currentLayerNodes[math.random(0, currentLayerNodes.size() - 1)]; const link = t...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ service: file.service, component: file.component, language: file.language, size: file.size, type: ...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ uuid: link.uuid, type: link.type, sourceNodeUuid: link.sourceNodeUuid, targetNodeUuid: link.target...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ id: \"harness-group\", name: \"Harness Data Group\", nodes: harnessNodes, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ groups: [mainGroup], relations: harnessLinks, discoveredProperties: validProps, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ platform: [0.2, 0.4, 0.8], ci: [0.8, 0.4, 0.2], cd: [0.2, 0.8, 0.2], ce: [0.8, 0.2, 0.8], core: [0...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ id: \"unified-group\", name: \"Unified Data Group\", nodes: allNodes, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ groups: [mainGroup], relations: allLinks, discoveredProperties: validProps, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts"
      ]
    },
    {
      "pattern": "{ ANIMAL_TYPES, COLOR_PALETTES, COUNTRIES_OF_BIRTH, COUNTRIES_OF_RESIDENCE, DEFAULT_ATTACHMENTS, FIR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ discoverNodeProperties, filterValidAxisProperties, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const node = this.createNode(i, layer.layerNumber, config); layerNodes.push(node); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(18, 80), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLOR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(5, 17), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLORS...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ age: math.random(65, 95), petType: PET_TYPES[math.random(0, maxPetTypeIndex)], petColor: PET_COLOR...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ animalType: ANIMAL_TYPES[math.random(0, ANIMAL_TYPES.size() - 1)], }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ layerNumber, numNodes: currentLayerNodes.size(), connectionsPerNode: 2, // Default connections per...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ this.ensureBackwardConnections(currentLayerNodes, nextLayerNodes, config, allLinks); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ this.generateInterLayerLink( sourceNode, nextLayerNodes, config, allLinks ); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const targetNode = shuffled[i]; const link = this.createLink(sourceNode, targetNode, config); allL...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const link = this.createLink(sourceNode, targetNode, config); allLinks.push(link); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ nodeConnections.set( link.sourceNodeUuid, (nodeConnections.get(link.sourceNodeUuid) || 0) + 1 ); n...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const node = nodes.find((n) => n.uuid === uuid); if (node) isolatedNodes.push(node); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const j = math.random(0, i); [array[i], array[j]] = [array[j], array[i]]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ return sameTypeNodes[math.random(0, sameTypeNodes.size() - 1)]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ return otherNodes[math.random(0, otherNodes.size() - 1)]; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const sourceNode = currentLayerNodes[math.random(0, currentLayerNodes.size() - 1)]; const link = t...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ service: file.service, component: file.component, language: file.language, size: file.size, type: ...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ uuid: link.uuid, type: link.type, sourceNodeUuid: link.sourceNodeUuid, targetNodeUuid: link.target...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ id: \"harness-group\", name: \"Harness Data Group\", nodes: harnessNodes, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ groups: [mainGroup], relations: harnessLinks, discoveredProperties: validProps, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const parts = path.split(\"/\"); return parts[parts.size() - 1] || path; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ platform: [0.2, 0.4, 0.8], ci: [0.8, 0.4, 0.2], cd: [0.2, 0.8, 0.2], ce: [0.8, 0.2, 0.8], core: [0...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const discoveredProps = discoverNodeProperties(nodes); const validProps = filterValidAxisPropertie...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ // Initialize all modules internally this.nodeGenerator = new NodeGenerator(); this.linkGenerator ...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ return this.testDataProcessor.generateClusterFromTestData(config); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ const layerNodes = this.nodeGenerator.generateLayerNodes(layer, config); layerNodes.forEach((node)...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ id: \"unified-group\", name: \"Unified Data Group\", nodes: allNodes, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ groups: [mainGroup], relations: allLinks, discoveredProperties: validProps, }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ this.useTestData = useTestData; this.testDataProcessor.setUseTestData(useTestData); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts"
      ]
    },
    {
      "pattern": "{ minX: number, maxX: number, minY: number, minZ: number, maxZ: number }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
      ]
    },
    {
      "pattern": "{ nodesByLayer, nodesByTypeAndLayer, typeCounters }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
      ]
    },
    {
      "pattern": "{ const countA = typeCounters.get(a) || 0; const countB = typeCounters.get(b) || 0; return countB > ...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts"
      ]
    },
    {
      "pattern": "{ typeXOffset += spacing.swimlaneSpacing; // Gap between swim lanes }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
      ]
    },
    {
      "pattern": "{ const value = resolvePropertyValue(node, propertyName); uniqueValues.add(value); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
        "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts"
      ]
    },
    {
      "pattern": "{ const halfWidth = block.Size.X / 2; const halfDepth = block.Size.Z / 2; minX = math.min(minX, bloc...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
        "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
      ]
    },
    {
      "pattern": "{ collectiveMinZ = math.min(collectiveMinZ, bounds.minZ); collectiveMaxZ = math.max(collectiveMaxZ, ...",
      "files": [
        "shared/modules/renderers/blocks/shadowBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts"
      ]
    },
    {
      "pattern": "{ this.propertyResolver = new PropertyValueResolver(); }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
        "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts"
      ]
    },
    {
      "pattern": "{ nodeHeight: RENDERER_CONSTANTS.HEXAGON.HEIGHT, nodeRadius: RENDERER_CONSTANTS.HEXAGON.WIDTH / 2, l...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts"
      ]
    },
    {
      "pattern": "{ // Keep existing node const hexagon = currentLayerNodes[i]; const node = this.createNodeFromHexago...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
      ]
    },
    {
      "pattern": "{ const targetNode = shuffled[i]; const link = this.createLink(sourceNode, targetNode, config); allL...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
      ]
    },
    {
      "pattern": "{ animalType: ANIMAL_TYPES[math.random(0, ANIMAL_TYPES.size() - 1)] }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
      ]
    },
    {
      "pattern": "{ nodeHeight: RENDERER_CONSTANTS.HEXAGON.HEIGHT, nodeRadius: RENDERER_CONSTANTS.HEXAGON.WIDTH / 2, l...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
        "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number; }...",
      "files": [
        "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
        "shared/modules/renderers/unifiedDataRenderer/types.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number; }...",
      "files": [
        "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
        "shared/modules/renderers/unifiedDataRenderer/types.ts"
      ]
    },
    {
      "pattern": "{ origin: Vector3; parent: Instance; height?: number; size?: number; }...",
      "files": [
        "shared/modules/renderers/blocks/platformBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/types.ts"
      ]
    },
    {
      "pattern": "{ const cluster = this.renderEnhancedData(parentFolder, config, origin); return cluster; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
      ]
    },
    {
      "pattern": "{ const cluster = this.renderEnhancedData(parentFolder, config, origin); return cluster; }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number }...",
      "files": [
        "shared/modules/renderers/blocks/baseBlockCreator.ts",
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
      ]
    },
    {
      "pattern": "{ minX: math.huge, maxX: -math.huge, minZ: math.huge, maxZ: -math.huge }...",
      "files": [
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
        "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts"
      ]
    },
    {
      "pattern": "{ minX: number; maxX: number; minZ: number; maxZ: number; }...",
      "files": [
        "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
        "shared/modules/renderers/verticalWallCreator.ts"
      ]
    },
    {
      "pattern": "{ source: ROPE_LABEL_CONSTANTS.DEFAULTS.SOURCE_TEXT, relation: relationTypeName, target: ROPE_LABEL_...",
      "files": [
        "shared/modules/ropeLabelMaker/utilities.ts",
        "shared/modules/ropeLabelMaker/utilities.ts"
      ]
    },
    {
      "pattern": "{ maxSize: ARRAY_LIMITS.MAX_LAYERS, minSize: 1, allowEmpty: false, }...",
      "files": [
        "shared/utils/validation/arrayValidation.ts",
        "shared/utils/validation/configValidation.ts"
      ]
    },
    {
      "pattern": "{ isValid: false, error: \"Input must be an array\" }...",
      "files": [
        "shared/utils/validation/arrayValidation.ts",
        "shared/utils/validation/stringValidation.ts"
      ]
    }
  ],
  "dependencies": {
    "graph": {
      "nodes": [
        {
          "id": "client/controllers/animationTestGUI.controller.ts",
          "label": "animationTestGUI.controller.ts",
          "type": "other",
          "size": 157
        },
        {
          "id": "client/controllers/configGUI.controller.ts",
          "label": "configGUI.controller.ts",
          "type": "other",
          "size": 164
        },
        {
          "id": "client/main.client.ts",
          "label": "main.client.ts",
          "type": "other",
          "size": 53
        },
        {
          "id": "client/services/configGui/componentFactory.ts",
          "label": "componentFactory.ts",
          "type": "service",
          "size": 299
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
          "label": "axisMappingSection.ts",
          "type": "service",
          "size": 142
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
          "label": "dropdown.ts",
          "type": "service",
          "size": 149
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/components/radioButton.ts",
          "label": "radioButton.ts",
          "type": "service",
          "size": 83
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
          "label": "visualCustomizationSection.ts",
          "type": "service",
          "size": 74
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
          "label": "yAxisConfigSection.ts",
          "type": "service",
          "size": 123
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/constants.ts",
          "label": "constants.ts",
          "type": "service",
          "size": 134
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/index.ts",
          "label": "index.ts",
          "type": "service",
          "size": 5
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/main.ts",
          "label": "main.ts",
          "type": "service",
          "size": 97
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/types.ts",
          "label": "types.ts",
          "type": "service",
          "size": 58
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
          "label": "layoutManager.ts",
          "type": "service",
          "size": 103
        },
        {
          "id": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts",
          "label": "screenGuiManager.ts",
          "type": "service",
          "size": 33
        },
        {
          "id": "client/services/configGui/components/collapsibleFrame.ts",
          "label": "collapsibleFrame.ts",
          "type": "service",
          "size": 186
        },
        {
          "id": "client/services/configGui/components/dropdown.ts",
          "label": "dropdown.ts",
          "type": "service",
          "size": 116
        },
        {
          "id": "client/services/configGui/components/dropdownTestControls.ts",
          "label": "dropdownTestControls.ts",
          "type": "service",
          "size": 137
        },
        {
          "id": "client/services/configGui/components/frame.ts",
          "label": "frame.ts",
          "type": "service",
          "size": 49
        },
        {
          "id": "client/services/configGui/components/globalSettings.ts",
          "label": "globalSettings.ts",
          "type": "service",
          "size": 48
        },
        {
          "id": "client/services/configGui/components/layerGrid.ts",
          "label": "layerGrid.ts",
          "type": "service",
          "size": 365
        },
        {
          "id": "client/services/configGui/components/nodeTypesSection.ts",
          "label": "nodeTypesSection.ts",
          "type": "service",
          "size": 170
        },
        {
          "id": "client/services/configGui/components/spacingControls.ts",
          "label": "spacingControls.ts",
          "type": "service",
          "size": 96
        },
        {
          "id": "client/services/configGui/components/status.ts",
          "label": "status.ts",
          "type": "service",
          "size": 40
        },
        {
          "id": "client/services/configGui/components/title.ts",
          "label": "title.ts",
          "type": "service",
          "size": 26
        },
        {
          "id": "client/services/configGui/components/visualCustomizationControls.ts",
          "label": "visualCustomizationControls.ts",
          "type": "service",
          "size": 213
        },
        {
          "id": "client/services/configGui/components/visualizationControls.ts",
          "label": "visualizationControls.ts",
          "type": "service",
          "size": 126
        },
        {
          "id": "client/services/configGui/components/yAxisControls.ts",
          "label": "yAxisControls.ts",
          "type": "service",
          "size": 257
        },
        {
          "id": "client/services/configGui/constants.ts",
          "label": "constants.ts",
          "type": "service",
          "size": 107
        },
        {
          "id": "client/services/configGui/eventHandlers.ts",
          "label": "eventHandlers.ts",
          "type": "service",
          "size": 173
        },
        {
          "id": "client/services/configGui/guiLayout.ts",
          "label": "guiLayout.ts",
          "type": "service",
          "size": 90
        },
        {
          "id": "client/services/configGui/index.ts",
          "label": "index.ts",
          "type": "service",
          "size": 11
        },
        {
          "id": "client/services/configGui/interfaces.ts",
          "label": "interfaces.ts",
          "type": "service",
          "size": 35
        },
        {
          "id": "client/services/configGui/makeConfigGui.ts",
          "label": "makeConfigGui.ts",
          "type": "service",
          "size": 359
        },
        {
          "id": "client/services/configGui/stateManager.ts",
          "label": "stateManager.ts",
          "type": "service",
          "size": 403
        },
        {
          "id": "client/services/configGui/utilities.ts",
          "label": "utilities.ts",
          "type": "service",
          "size": 82
        },
        {
          "id": "client/services/configGui/validationHandlers.ts",
          "label": "validationHandlers.ts",
          "type": "service",
          "size": 199
        },
        {
          "id": "client/services/keyboardShortcuts.service.ts",
          "label": "keyboardShortcuts.service.ts",
          "type": "service",
          "size": 207
        },
        {
          "id": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts",
          "label": "nodePropertiesInspector.service.ts",
          "type": "service",
          "size": 315
        },
        {
          "id": "server/main.server.ts",
          "label": "main.server.ts",
          "type": "other",
          "size": 22
        },
        {
          "id": "server/services/colorsTest.service.ts",
          "label": "colorsTest.service.ts",
          "type": "service",
          "size": 126
        },
        {
          "id": "server/services/configGUIServer.service.ts",
          "label": "configGUIServer.service.ts",
          "type": "service",
          "size": 138
        },
        {
          "id": "server/services/graphInitializer.service.ts",
          "label": "graphInitializer.service.ts",
          "type": "service",
          "size": 151
        },
        {
          "id": "server/services/groupAnimationTest.service.ts",
          "label": "groupAnimationTest.service.ts",
          "type": "service",
          "size": 222
        },
        {
          "id": "server/services/main/dev2features.ts",
          "label": "dev2features.ts",
          "type": "service",
          "size": 34
        },
        {
          "id": "server/services/main/game.service.ts",
          "label": "game.service.ts",
          "type": "service",
          "size": 348
        },
        {
          "id": "shared/constants/axisDefaults.ts",
          "label": "axisDefaults.ts",
          "type": "other",
          "size": 62
        },
        {
          "id": "shared/data/tempHarnessLinks.ts",
          "label": "tempHarnessLinks.ts",
          "type": "other",
          "size": 14034
        },
        {
          "id": "shared/data/tempHarnessTestData.ts",
          "label": "tempHarnessTestData.ts",
          "type": "other",
          "size": 23033
        },
        {
          "id": "shared/data/tempTestData.ts",
          "label": "tempTestData.ts",
          "type": "other",
          "size": 252
        },
        {
          "id": "shared/interfaces/IMaker.ts",
          "label": "IMaker.ts",
          "type": "interface",
          "size": 128
        },
        {
          "id": "shared/interfaces/IService.ts",
          "label": "IService.ts",
          "type": "interface",
          "size": 39
        },
        {
          "id": "shared/interfaces/enhancedGenerator.interface.ts",
          "label": "enhancedGenerator.interface.ts",
          "type": "interface",
          "size": 74
        },
        {
          "id": "shared/interfaces/nodeTypes.ts",
          "label": "nodeTypes.ts",
          "type": "interface",
          "size": 54
        },
        {
          "id": "shared/interfaces/simpleDataGenerator.interface.ts",
          "label": "simpleDataGenerator.interface.ts",
          "type": "interface",
          "size": 72
        },
        {
          "id": "shared/modules/TextBoxMaker.ts",
          "label": "TextBoxMaker.ts",
          "type": "module",
          "size": 101
        },
        {
          "id": "shared/modules/TextLabelMaker.ts",
          "label": "TextLabelMaker.ts",
          "type": "module",
          "size": 100
        },
        {
          "id": "shared/modules/barMaker/barMaker.ts",
          "label": "barMaker.ts",
          "type": "module",
          "size": 109
        },
        {
          "id": "shared/modules/barMaker/constants.ts",
          "label": "constants.ts",
          "type": "module",
          "size": 21
        },
        {
          "id": "shared/modules/barMaker/index.ts",
          "label": "index.ts",
          "type": "module",
          "size": 6
        },
        {
          "id": "shared/modules/barMaker/interfaces.ts",
          "label": "interfaces.ts",
          "type": "module",
          "size": 36
        },
        {
          "id": "shared/modules/barMaker/standardizedInterfaces.ts",
          "label": "standardizedInterfaces.ts",
          "type": "module",
          "size": 135
        },
        {
          "id": "shared/modules/barMaker/utilities.ts",
          "label": "utilities.ts",
          "type": "module",
          "size": 49
        },
        {
          "id": "shared/modules/hexStackMaker/constants.ts",
          "label": "constants.ts",
          "type": "module",
          "size": 23
        },
        {
          "id": "shared/modules/hexStackMaker/hexStackMaker.ts",
          "label": "hexStackMaker.ts",
          "type": "module",
          "size": 74
        },
        {
          "id": "shared/modules/hexStackMaker/index.ts",
          "label": "index.ts",
          "type": "module",
          "size": 6
        },
        {
          "id": "shared/modules/hexStackMaker/interfaces.ts",
          "label": "interfaces.ts",
          "type": "module",
          "size": 9
        },
        {
          "id": "shared/modules/hexStackMaker/standardizedInterfaces.ts",
          "label": "standardizedInterfaces.ts",
          "type": "module",
          "size": 73
        },
        {
          "id": "shared/modules/hexStackMaker/utilities.ts",
          "label": "utilities.ts",
          "type": "module",
          "size": 16
        },
        {
          "id": "shared/modules/hexagonMaker/constants.ts",
          "label": "constants.ts",
          "type": "module",
          "size": 29
        },
        {
          "id": "shared/modules/hexagonMaker/hexagonMaker.ts",
          "label": "hexagonMaker.ts",
          "type": "module",
          "size": 107
        },
        {
          "id": "shared/modules/hexagonMaker/index.ts",
          "label": "index.ts",
          "type": "module",
          "size": 6
        },
        {
          "id": "shared/modules/hexagonMaker/interfaces.ts",
          "label": "interfaces.ts",
          "type": "module",
          "size": 11
        },
        {
          "id": "shared/modules/hexagonMaker/standardizedInterfaces.ts",
          "label": "standardizedInterfaces.ts",
          "type": "module",
          "size": 97
        },
        {
          "id": "shared/modules/hexagonMaker/utilities.ts",
          "label": "utilities.ts",
          "type": "module",
          "size": 74
        },
        {
          "id": "shared/modules/labelBlockMaker/constants.ts",
          "label": "constants.ts",
          "type": "module",
          "size": 28
        },
        {
          "id": "shared/modules/labelBlockMaker/index.ts",
          "label": "index.ts",
          "type": "module",
          "size": 16
        },
        {
          "id": "shared/modules/labelBlockMaker/interfaces.ts",
          "label": "interfaces.ts",
          "type": "module",
          "size": 52
        },
        {
          "id": "shared/modules/labelBlockMaker/labelBlockMaker.ts",
          "label": "labelBlockMaker.ts",
          "type": "module",
          "size": 94
        },
        {
          "id": "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
          "label": "standardizedInterfaces.ts",
          "type": "module",
          "size": 154
        },
        {
          "id": "shared/modules/labelBlockMaker/utilities.ts",
          "label": "utilities.ts",
          "type": "module",
          "size": 59
        },
        {
          "id": "shared/modules/labelGroupMaker.ts",
          "label": "labelGroupMaker.ts",
          "type": "module",
          "size": 179
        },
        {
          "id": "shared/modules/makeOriginBlock.ts",
          "label": "makeOriginBlock.ts",
          "type": "module",
          "size": 91
        },
        {
          "id": "shared/modules/renderers/blocks/baseBlockCreator.ts",
          "label": "baseBlockCreator.ts",
          "type": "module",
          "size": 86
        },
        {
          "id": "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
          "label": "blockDimensionCalculator.ts",
          "type": "module",
          "size": 106
        },
        {
          "id": "shared/modules/renderers/blocks/endcapBlockCreator.ts",
          "label": "endcapBlockCreator.ts",
          "type": "module",
          "size": 216
        },
        {
          "id": "shared/modules/renderers/blocks/index.ts",
          "label": "index.ts",
          "type": "module",
          "size": 10
        },
        {
          "id": "shared/modules/renderers/blocks/platformBlockCreator.ts",
          "label": "platformBlockCreator.ts",
          "type": "module",
          "size": 65
        },
        {
          "id": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
          "label": "shadowBlockCreator.ts",
          "type": "module",
          "size": 252
        },
        {
          "id": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
          "label": "swimlaneBlockCreator.ts",
          "type": "module",
          "size": 246
        },
        {
          "id": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "label": "yParallelShadowCreator.ts",
          "type": "module",
          "size": 233
        },
        {
          "id": "shared/modules/renderers/constants/blockConstants.ts",
          "label": "blockConstants.ts",
          "type": "module",
          "size": 62
        },
        {
          "id": "shared/modules/renderers/constants/index.ts",
          "label": "index.ts",
          "type": "module",
          "size": 7
        },
        {
          "id": "shared/modules/renderers/constants/labelConstants.ts",
          "label": "labelConstants.ts",
          "type": "module",
          "size": 39
        },
        {
          "id": "shared/modules/renderers/constants/layoutConstants.ts",
          "label": "layoutConstants.ts",
          "type": "module",
          "size": 29
        },
        {
          "id": "shared/modules/renderers/constants/positionConstants.ts",
          "label": "positionConstants.ts",
          "type": "module",
          "size": 35
        },
        {
          "id": "shared/modules/renderers/constants/robloxColors.ts",
          "label": "robloxColors.ts",
          "type": "module",
          "size": 92
        },
        {
          "id": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/constants.ts",
          "label": "constants.ts",
          "type": "module",
          "size": 79
        },
        {
          "id": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "label": "ropeCreator.ts",
          "type": "module",
          "size": 227
        },
        {
          "id": "shared/modules/renderers/flatBlockCreator.ts",
          "label": "flatBlockCreator.ts",
          "type": "module",
          "size": 237
        },
        {
          "id": "shared/modules/renderers/propertyValueResolver.ts",
          "label": "propertyValueResolver.ts",
          "type": "module",
          "size": 258
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "label": "constants.ts",
          "type": "module",
          "size": 71
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts",
          "label": "boundsCalculator.ts",
          "type": "module",
          "size": 154
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
          "label": "interfaces.ts",
          "type": "module",
          "size": 116
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
          "label": "linkGenerator.ts",
          "type": "module",
          "size": 334
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
          "label": "nodeGenerator.ts",
          "type": "module",
          "size": 174
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
          "label": "propertyManager.ts",
          "type": "module",
          "size": 187
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
          "label": "testDataProcessor.ts",
          "type": "module",
          "size": 211
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "label": "dataGenerator-original-backup.ts",
          "type": "module",
          "size": 631
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "label": "dataGenerator.ts",
          "type": "module",
          "size": 647
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "label": "dataGeneratorModular.ts",
          "type": "module",
          "size": 646
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
          "label": "nodeOrganizer.ts",
          "type": "module",
          "size": 135
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "label": "positionCalculator.ts",
          "type": "module",
          "size": 350
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
          "label": "positionMapper.ts",
          "type": "module",
          "size": 154
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/index.ts",
          "label": "index.ts",
          "type": "module",
          "size": 9
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "label": "interfaces.ts",
          "type": "module",
          "size": 75
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "label": "laneManager.ts",
          "type": "module",
          "size": 422
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
          "label": "platformShadowManager.ts",
          "type": "module",
          "size": 69
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
          "label": "wallManager.ts",
          "type": "module",
          "size": 113
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
          "label": "yParallelShadowManager.ts",
          "type": "module",
          "size": 67
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
          "label": "labelRenderer.ts",
          "type": "module",
          "size": 185
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "label": "nodeRenderer.ts",
          "type": "module",
          "size": 223
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "label": "updateManager.ts",
          "type": "module",
          "size": 397
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/types.ts",
          "label": "types.ts",
          "type": "module",
          "size": 179
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "label": "unifiedDataRenderer.ts",
          "type": "module",
          "size": 302
        },
        {
          "id": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
          "label": "colorMapper.ts",
          "type": "module",
          "size": 240
        },
        {
          "id": "shared/modules/renderers/verticalWallCreator.ts",
          "label": "verticalWallCreator.ts",
          "type": "module",
          "size": 193
        },
        {
          "id": "shared/modules/ropeLabelMaker/constants.ts",
          "label": "constants.ts",
          "type": "module",
          "size": 39
        },
        {
          "id": "shared/modules/ropeLabelMaker/index.ts",
          "label": "index.ts",
          "type": "module",
          "size": 12
        },
        {
          "id": "shared/modules/ropeLabelMaker/interfaces.ts",
          "label": "interfaces.ts",
          "type": "module",
          "size": 49
        },
        {
          "id": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
          "label": "ropeLabelMaker.ts",
          "type": "module",
          "size": 40
        },
        {
          "id": "shared/modules/ropeLabelMaker/utilities.ts",
          "label": "utilities.ts",
          "type": "module",
          "size": 88
        },
        {
          "id": "shared/services/base/BaseService.ts",
          "label": "BaseService.ts",
          "type": "service",
          "size": 172
        },
        {
          "id": "shared/utils/nodePropertyHelpers.ts",
          "label": "nodePropertyHelpers.ts",
          "type": "other",
          "size": 89
        },
        {
          "id": "shared/utils/propertyDiscovery.ts",
          "label": "propertyDiscovery.ts",
          "type": "other",
          "size": 145
        },
        {
          "id": "shared/utils/stringUtils.ts",
          "label": "stringUtils.ts",
          "type": "other",
          "size": 22
        },
        {
          "id": "shared/utils/validation/arrayValidation.ts",
          "label": "arrayValidation.ts",
          "type": "other",
          "size": 177
        },
        {
          "id": "shared/utils/validation/configValidation.ts",
          "label": "configValidation.ts",
          "type": "other",
          "size": 371
        },
        {
          "id": "shared/utils/validation/index.ts",
          "label": "index.ts",
          "type": "other",
          "size": 7
        },
        {
          "id": "shared/utils/validation/stringValidation.ts",
          "label": "stringValidation.ts",
          "type": "other",
          "size": 214
        }
      ],
      "edges": [
        {
          "from": "client/controllers/configGUI.controller.ts",
          "to": "shared/services/base/BaseService.ts",
          "type": "import"
        },
        {
          "from": "client/controllers/configGUI.controller.ts",
          "to": "client/services/configGui/index.ts",
          "type": "import"
        },
        {
          "from": "client/controllers/configGUI.controller.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "client/controllers/configGUI.controller.ts",
          "to": "shared/utils/validation/index.ts",
          "type": "import"
        },
        {
          "from": "client/main.client.ts",
          "to": "client/controllers/configGUI.controller.ts",
          "type": "import"
        },
        {
          "from": "client/main.client.ts",
          "to": "client/controllers/animationTestGUI.controller.ts",
          "type": "import"
        },
        {
          "from": "client/main.client.ts",
          "to": "client/services/keyboardShortcuts.service.ts",
          "type": "import"
        },
        {
          "from": "client/main.client.ts",
          "to": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/componentFactory.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/componentFactory.ts",
          "to": "client/services/configGui/components/dropdown.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/componentFactory.ts",
          "to": "client/services/configGui/components/frame.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/componentFactory.ts",
          "to": "client/services/configGui/components/title.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/radioButton.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/components/radioButton.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
          "to": "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/constants.ts",
          "to": "shared/constants/axisDefaults.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/main.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/main.ts",
          "to": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/main.ts",
          "to": "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/main.ts",
          "to": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/main.ts",
          "to": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/collapsibleFrame.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/collapsibleFrame.ts",
          "to": "client/services/configGui/utilities.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/collapsibleFrame.ts",
          "to": "client/services/configGui/componentFactory.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/dropdown.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/dropdownTestControls.ts",
          "to": "client/services/configGui/componentFactory.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/frame.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/frame.ts",
          "to": "client/services/configGui/utilities.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/globalSettings.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/globalSettings.ts",
          "to": "client/services/configGui/components/spacingControls.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/layerGrid.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/layerGrid.ts",
          "to": "client/services/configGui/interfaces.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/nodeTypesSection.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/spacingControls.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/status.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/title.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/visualCustomizationControls.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/visualizationControls.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/yAxisControls.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/components/yAxisControls.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/eventHandlers.ts",
          "to": "client/services/configGui/interfaces.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/eventHandlers.ts",
          "to": "client/services/configGui/stateManager.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/eventHandlers.ts",
          "to": "client/services/configGui/components/status.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/eventHandlers.ts",
          "to": "client/services/configGui/validationHandlers.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/guiLayout.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/interfaces.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/interfaces.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/components/collapsibleFrame.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/components/globalSettings.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/components/layerGrid.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/components/status.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/components/visualizationControls.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/components/axisMappingControls/index.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/stateManager.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/eventHandlers.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/componentFactory.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/makeConfigGui.ts",
          "to": "client/services/configGui/guiLayout.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/stateManager.ts",
          "to": "client/services/configGui/interfaces.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/stateManager.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/stateManager.ts",
          "to": "shared/constants/axisDefaults.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/stateManager.ts",
          "to": "client/services/configGui/components/axisMappingControls/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/utilities.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/utilities.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/validationHandlers.ts",
          "to": "client/services/configGui/interfaces.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/validationHandlers.ts",
          "to": "client/services/configGui/constants.ts",
          "type": "import"
        },
        {
          "from": "client/services/configGui/validationHandlers.ts",
          "to": "shared/utils/validation/index.ts",
          "type": "import"
        },
        {
          "from": "client/services/keyboardShortcuts.service.ts",
          "to": "shared/services/base/BaseService.ts",
          "type": "import"
        },
        {
          "from": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "server/main.server.ts",
          "to": "server/services/main/game.service.ts",
          "type": "import"
        },
        {
          "from": "server/services/configGUIServer.service.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/index.ts",
          "type": "import"
        },
        {
          "from": "server/services/configGUIServer.service.ts",
          "to": "shared/services/base/BaseService.ts",
          "type": "import"
        },
        {
          "from": "server/services/configGUIServer.service.ts",
          "to": "shared/utils/validation/index.ts",
          "type": "import"
        },
        {
          "from": "server/services/graphInitializer.service.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "server/services/groupAnimationTest.service.ts",
          "to": "shared/modules/hexagonMaker/index.ts",
          "type": "import"
        },
        {
          "from": "server/services/main/dev2features.ts",
          "to": "server/services/groupAnimationTest.service.ts",
          "type": "import"
        },
        {
          "from": "server/services/main/dev2features.ts",
          "to": "server/services/colorsTest.service.ts",
          "type": "import"
        },
        {
          "from": "server/services/main/game.service.ts",
          "to": "shared/services/base/BaseService.ts",
          "type": "import"
        },
        {
          "from": "server/services/main/game.service.ts",
          "to": "server/services/configGUIServer.service.ts",
          "type": "import"
        },
        {
          "from": "server/services/main/game.service.ts",
          "to": "server/services/graphInitializer.service.ts",
          "type": "import"
        },
        {
          "from": "server/services/main/game.service.ts",
          "to": "server/services/main/dev2features.ts",
          "type": "import"
        },
        {
          "from": "server/services/main/game.service.ts",
          "to": "shared/modules/makeOriginBlock.ts",
          "type": "import"
        },
        {
          "from": "shared/data/tempTestData.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/barMaker/barMaker.ts",
          "to": "shared/modules/barMaker/standardizedInterfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/barMaker/barMaker.ts",
          "to": "shared/modules/barMaker/utilities.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/barMaker/barMaker.ts",
          "to": "shared/modules/TextLabelMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/barMaker/interfaces.ts",
          "to": "shared/modules/barMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/barMaker/standardizedInterfaces.ts",
          "to": "shared/interfaces/IMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/barMaker/utilities.ts",
          "to": "shared/utils/stringUtils.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/barMaker/utilities.ts",
          "to": "shared/modules/barMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexStackMaker/hexStackMaker.ts",
          "to": "shared/modules/hexagonMaker/index.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexStackMaker/hexStackMaker.ts",
          "to": "shared/modules/hexStackMaker/standardizedInterfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexStackMaker/hexStackMaker.ts",
          "to": "shared/modules/hexStackMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexStackMaker/hexStackMaker.ts",
          "to": "shared/modules/hexStackMaker/utilities.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexStackMaker/standardizedInterfaces.ts",
          "to": "shared/interfaces/IMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexStackMaker/utilities.ts",
          "to": "shared/utils/stringUtils.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexStackMaker/utilities.ts",
          "to": "shared/modules/hexStackMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexagonMaker/hexagonMaker.ts",
          "to": "shared/modules/barMaker/index.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexagonMaker/hexagonMaker.ts",
          "to": "shared/modules/hexagonMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexagonMaker/hexagonMaker.ts",
          "to": "shared/modules/hexagonMaker/utilities.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexagonMaker/hexagonMaker.ts",
          "to": "shared/modules/TextLabelMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexagonMaker/hexagonMaker.ts",
          "to": "shared/modules/hexagonMaker/standardizedInterfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexagonMaker/standardizedInterfaces.ts",
          "to": "shared/interfaces/IMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexagonMaker/utilities.ts",
          "to": "shared/utils/stringUtils.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/hexagonMaker/utilities.ts",
          "to": "shared/modules/hexagonMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/constants.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/interfaces.ts",
          "to": "shared/modules/labelBlockMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/labelBlockMaker.ts",
          "to": "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/labelBlockMaker.ts",
          "to": "shared/modules/labelBlockMaker/utilities.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/labelBlockMaker.ts",
          "to": "shared/modules/labelBlockMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/labelBlockMaker.ts",
          "to": "shared/utils/stringUtils.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
          "to": "shared/interfaces/IMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/utilities.ts",
          "to": "shared/modules/TextBoxMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelBlockMaker/utilities.ts",
          "to": "shared/modules/labelBlockMaker/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelGroupMaker.ts",
          "to": "shared/modules/TextBoxMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelGroupMaker.ts",
          "to": "shared/modules/renderers/constants/labelConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/labelGroupMaker.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/makeOriginBlock.ts",
          "to": "shared/modules/labelBlockMaker/index.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/baseBlockCreator.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/endcapBlockCreator.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/endcapBlockCreator.ts",
          "to": "shared/modules/renderers/blocks/baseBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/platformBlockCreator.ts",
          "to": "shared/modules/renderers/blocks/baseBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/platformBlockCreator.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
          "to": "shared/modules/renderers/blocks/baseBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
          "to": "shared/modules/renderers/constants/layoutConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
          "to": "shared/modules/renderers/blocks/endcapBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
          "to": "shared/modules/renderers/blocks/baseBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
          "to": "shared/modules/renderers/constants/layoutConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "to": "shared/modules/renderers/blocks/baseBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "to": "shared/modules/renderers/constants/layoutConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "to": "shared/modules/renderers/constants/positionConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "to": "shared/modules/renderers/constants/robloxColors.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "to": "shared/modules/renderers/propertyValueResolver.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/constants/blockConstants.ts",
          "to": "shared/modules/renderers/constants/robloxColors.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "to": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "to": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "to": "shared/utils/stringUtils.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/flatBlockCreator.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/propertyValueResolver.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/propertyValueResolver.ts",
          "to": "shared/utils/nodePropertyHelpers.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/propertyValueResolver.ts",
          "to": "shared/modules/renderers/constants/positionConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/propertyValueResolver.ts",
          "to": "shared/utils/propertyDiscovery.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts",
          "to": "shared/modules/renderers/constants/positionConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
          "to": "shared/utils/propertyDiscovery.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
          "to": "shared/utils/propertyDiscovery.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
          "to": "shared/data/tempHarnessLinks.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
          "to": "shared/data/tempHarnessTestData.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "to": "shared/data/tempTestData.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "to": "shared/utils/propertyDiscovery.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "to": "shared/data/tempHarnessLinks.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "to": "shared/data/tempHarnessTestData.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "to": "shared/utils/propertyDiscovery.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "to": "shared/data/tempHarnessLinks.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "to": "shared/data/tempHarnessTestData.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "to": "shared/utils/propertyDiscovery.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "to": "shared/data/tempHarnessLinks.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "to": "shared/data/tempHarnessTestData.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
          "to": "shared/utils/nodePropertyHelpers.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "to": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "to": "shared/modules/renderers/propertyValueResolver.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "to": "shared/modules/renderers/constants/positionConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "to": "shared/constants/axisDefaults.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
          "to": "shared/modules/renderers/constants/positionConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
          "to": "shared/utils/nodePropertyHelpers.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/types.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/modules/renderers/propertyValueResolver.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/modules/renderers/blocks/endcapBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "to": "shared/constants/axisDefaults.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
          "to": "shared/modules/renderers/blocks/platformBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
          "to": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
          "to": "shared/modules/renderers/constants/blockConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
          "to": "shared/modules/renderers/constants/layoutConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/types.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
          "to": "shared/modules/renderers/verticalWallCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
          "to": "shared/modules/renderers/propertyValueResolver.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/types.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
          "to": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
          "to": "shared/modules/renderers/constants/layoutConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/types.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
          "to": "shared/modules/renderers/constants/labelConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
          "to": "shared/modules/renderers/constants/positionConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/modules/hexagonMaker/index.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/modules/renderers/propertyValueResolver.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "to": "shared/constants/axisDefaults.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "to": "shared/modules/hexagonMaker/index.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "to": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "to": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/types.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/types.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/propertyValueResolver.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/constants/layoutConstants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/constants/axisDefaults.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
          "to": "shared/modules/renderers/constants/robloxColors.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
          "to": "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
          "to": "shared/modules/labelGroupMaker.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
          "to": "shared/modules/ropeLabelMaker/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
          "to": "shared/modules/ropeLabelMaker/utilities.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/ropeLabelMaker/utilities.ts",
          "to": "shared/modules/ropeLabelMaker/constants.ts",
          "type": "import"
        },
        {
          "from": "shared/modules/ropeLabelMaker/utilities.ts",
          "to": "shared/modules/ropeLabelMaker/interfaces.ts",
          "type": "import"
        },
        {
          "from": "shared/services/base/BaseService.ts",
          "to": "shared/interfaces/IService.ts",
          "type": "import"
        },
        {
          "from": "shared/utils/nodePropertyHelpers.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/utils/nodePropertyHelpers.ts",
          "to": "shared/interfaces/nodeTypes.ts",
          "type": "import"
        },
        {
          "from": "shared/utils/nodePropertyHelpers.ts",
          "to": "shared/utils/propertyDiscovery.ts",
          "type": "import"
        },
        {
          "from": "shared/utils/propertyDiscovery.ts",
          "to": "shared/interfaces/simpleDataGenerator.interface.ts",
          "type": "import"
        },
        {
          "from": "shared/utils/validation/configValidation.ts",
          "to": "shared/utils/validation/arrayValidation.ts",
          "type": "import"
        },
        {
          "from": "shared/utils/validation/configValidation.ts",
          "to": "shared/interfaces/enhancedGenerator.interface.ts",
          "type": "import"
        }
      ]
    },
    "circular": [],
    "cohesion": {
      "client": {
        "files": [
          "client/controllers/animationTestGUI.controller.ts",
          "client/controllers/configGUI.controller.ts",
          "client/main.client.ts",
          "client/services/configGui/componentFactory.ts",
          "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
          "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
          "client/services/configGui/components/axisMappingControls/components/radioButton.ts",
          "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
          "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
          "client/services/configGui/components/axisMappingControls/constants.ts",
          "client/services/configGui/components/axisMappingControls/index.ts",
          "client/services/configGui/components/axisMappingControls/main.ts",
          "client/services/configGui/components/axisMappingControls/types.ts",
          "client/services/configGui/components/axisMappingControls/utils/layoutManager.ts",
          "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts",
          "client/services/configGui/components/collapsibleFrame.ts",
          "client/services/configGui/components/dropdown.ts",
          "client/services/configGui/components/dropdownTestControls.ts",
          "client/services/configGui/components/frame.ts",
          "client/services/configGui/components/globalSettings.ts",
          "client/services/configGui/components/layerGrid.ts",
          "client/services/configGui/components/nodeTypesSection.ts",
          "client/services/configGui/components/spacingControls.ts",
          "client/services/configGui/components/status.ts",
          "client/services/configGui/components/title.ts",
          "client/services/configGui/components/visualCustomizationControls.ts",
          "client/services/configGui/components/visualizationControls.ts",
          "client/services/configGui/components/yAxisControls.ts",
          "client/services/configGui/constants.ts",
          "client/services/configGui/eventHandlers.ts",
          "client/services/configGui/guiLayout.ts",
          "client/services/configGui/index.ts",
          "client/services/configGui/interfaces.ts",
          "client/services/configGui/makeConfigGui.ts",
          "client/services/configGui/stateManager.ts",
          "client/services/configGui/utilities.ts",
          "client/services/configGui/validationHandlers.ts",
          "client/services/keyboardShortcuts.service.ts",
          "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts"
        ],
        "internalEdges": 70,
        "externalEdges": 10,
        "cohesion": 0.875,
        "coupling": 0.125
      },
      "server": {
        "files": [
          "server/main.server.ts",
          "server/services/colorsTest.service.ts",
          "server/services/configGUIServer.service.ts",
          "server/services/graphInitializer.service.ts",
          "server/services/groupAnimationTest.service.ts",
          "server/services/main/dev2features.ts",
          "server/services/main/game.service.ts"
        ],
        "internalEdges": 6,
        "externalEdges": 7,
        "cohesion": 0.46153846153846156,
        "coupling": 0.5384615384615384
      },
      "shared": {
        "files": [
          "shared/constants/axisDefaults.ts",
          "shared/data/tempHarnessLinks.ts",
          "shared/data/tempHarnessTestData.ts",
          "shared/data/tempTestData.ts",
          "shared/interfaces/IMaker.ts",
          "shared/interfaces/IService.ts",
          "shared/interfaces/enhancedGenerator.interface.ts",
          "shared/interfaces/nodeTypes.ts",
          "shared/interfaces/simpleDataGenerator.interface.ts",
          "shared/modules/TextBoxMaker.ts",
          "shared/modules/TextLabelMaker.ts",
          "shared/modules/barMaker/barMaker.ts",
          "shared/modules/barMaker/constants.ts",
          "shared/modules/barMaker/index.ts",
          "shared/modules/barMaker/interfaces.ts",
          "shared/modules/barMaker/standardizedInterfaces.ts",
          "shared/modules/barMaker/utilities.ts",
          "shared/modules/hexStackMaker/constants.ts",
          "shared/modules/hexStackMaker/hexStackMaker.ts",
          "shared/modules/hexStackMaker/index.ts",
          "shared/modules/hexStackMaker/interfaces.ts",
          "shared/modules/hexStackMaker/standardizedInterfaces.ts",
          "shared/modules/hexStackMaker/utilities.ts",
          "shared/modules/hexagonMaker/constants.ts",
          "shared/modules/hexagonMaker/hexagonMaker.ts",
          "shared/modules/hexagonMaker/index.ts",
          "shared/modules/hexagonMaker/interfaces.ts",
          "shared/modules/hexagonMaker/standardizedInterfaces.ts",
          "shared/modules/hexagonMaker/utilities.ts",
          "shared/modules/labelBlockMaker/constants.ts",
          "shared/modules/labelBlockMaker/index.ts",
          "shared/modules/labelBlockMaker/interfaces.ts",
          "shared/modules/labelBlockMaker/labelBlockMaker.ts",
          "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
          "shared/modules/labelBlockMaker/utilities.ts",
          "shared/modules/labelGroupMaker.ts",
          "shared/modules/makeOriginBlock.ts",
          "shared/modules/renderers/blocks/baseBlockCreator.ts",
          "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
          "shared/modules/renderers/blocks/endcapBlockCreator.ts",
          "shared/modules/renderers/blocks/index.ts",
          "shared/modules/renderers/blocks/platformBlockCreator.ts",
          "shared/modules/renderers/blocks/shadowBlockCreator.ts",
          "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
          "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
          "shared/modules/renderers/constants/blockConstants.ts",
          "shared/modules/renderers/constants/index.ts",
          "shared/modules/renderers/constants/labelConstants.ts",
          "shared/modules/renderers/constants/layoutConstants.ts",
          "shared/modules/renderers/constants/positionConstants.ts",
          "shared/modules/renderers/constants/robloxColors.ts",
          "shared/modules/renderers/dataGeneratorRobloxRendererUtils/constants.ts",
          "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
          "shared/modules/renderers/flatBlockCreator.ts",
          "shared/modules/renderers/propertyValueResolver.ts",
          "shared/modules/renderers/unifiedDataRenderer/constants.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/interfaces.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/linkGenerator.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/nodeGenerator.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/propertyManager.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator/testDataProcessor.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator-original-backup.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/dataGeneratorModular.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
          "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
          "shared/modules/renderers/unifiedDataRenderer/index.ts",
          "shared/modules/renderers/unifiedDataRenderer/interfaces.ts",
          "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
          "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
          "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
          "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
          "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
          "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
          "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
          "shared/modules/renderers/unifiedDataRenderer/types.ts",
          "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
          "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
          "shared/modules/renderers/verticalWallCreator.ts",
          "shared/modules/ropeLabelMaker/constants.ts",
          "shared/modules/ropeLabelMaker/index.ts",
          "shared/modules/ropeLabelMaker/interfaces.ts",
          "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
          "shared/modules/ropeLabelMaker/utilities.ts",
          "shared/services/base/BaseService.ts",
          "shared/utils/nodePropertyHelpers.ts",
          "shared/utils/propertyDiscovery.ts",
          "shared/utils/stringUtils.ts",
          "shared/utils/validation/arrayValidation.ts",
          "shared/utils/validation/configValidation.ts",
          "shared/utils/validation/index.ts",
          "shared/utils/validation/stringValidation.ts"
        ],
        "internalEdges": 200,
        "externalEdges": 0,
        "cohesion": 1,
        "coupling": 0
      }
    }
  }
}