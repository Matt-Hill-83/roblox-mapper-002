{
  "timestamp": "2025-07-11T01:46:44.290Z",
  "summary": {
    "filesAnalyzed": 133,
    "totalIssues": 1137,
    "filesWithIssues": 91,
    "typeAnnotationIssues": 0,
    "namingConventionIssues": 0,
    "highComplexityIssues": 0
  },
  "issuesByFile": [
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
      "issueCount": 60,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.useTestData) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.layerNumber === 1 && nextLayerNodes) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasBackwardConnection) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < layer.numNodes; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"man\" || nodeTypeName === \"woman\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"child\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"grandparent\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!linkExists) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (count === 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (targetNode) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasBackwardConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const candidateNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkExists ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const otherNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxItems ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validHarnessLinks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
      "issueCount": 60,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (match) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < newLayer.numNodes; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i < newLayer.numNodes) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerNum > newLayerCount) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (hexagon && node.position) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties?.animalType) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentNodesByLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allLinks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentNodesByLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const match ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const matchA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const matchB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const indexA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const indexB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentPos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const WIDTH ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const HEIGHT ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeIndex ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
      "issueCount": 57,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let layer = 1; layer <= numLayers; layer++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let layer = 1; layer <= numLayers; layer++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let checkLayer = 1; checkLayer <= numLayers; checkLayer++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isYAxis) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const minFinalY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const groundClearanceAdjustment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalOffsetY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numLayers ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProperties ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sortedTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeXPositions ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeXPositions ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zPositionMap ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisFromMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const useLayerForY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPositionMap ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const baseX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const checkKey ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const checkNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centeringOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const x ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const z ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const y ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeCounter ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const paddedNumber ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithType ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
      "issueCount": 48,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zParallelLanes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xParallelLanes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allLaneBounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeRadius ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const oldMinX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const oldMaxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let overallMinZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let overallMaxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const commonCenterZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zBuffer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlockTop ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockYPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const colors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let fullMinX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let fullMaxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlockTop ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMinZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMaxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collectiveCenter ="
        }
      ]
    },
    {
      "file": "shared/utils/validation/configValidation.ts",
      "issueCount": 44,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!layersResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of layerErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.spacing) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of spacingErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.visualization) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of vizErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.axisMapping || cfg.spatialGrouping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of mappingErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.spatialGrouping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.axisMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.visualMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of visualMappingErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.yAxisConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of yAxisErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.numPetTypes !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.maxDataItems !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of numericFields) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of booleanFields) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasOldNames && !hasNewNames) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of stringFields) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of stringFields) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cfg ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layersResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualMappingErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const prefix ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasOldNames ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasNewNames ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result ="
        }
      ]
    },
    {
      "file": "server/services/main/game.service.ts",
      "issueCount": 44,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.gameStarted) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.myStuffFolder) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (true) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (barPart) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (surfaceGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (textLabel) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (httpMethod) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (attrValue !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n            name === \"ZParallel_Lane_httpMethod_GET\" ||\n            name === \"ZParallel_Lane_httpMethod_POST\" ||\n            name === \"ZParallel_Lane_httpMethod_PUT\" ||\n            name === \"ZParallel_Lane_httpMethod_MULTIPLE\" ||\n            name === \"ZParallel_Lane_httpMethod_UNKNOWN\"\n          ) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n              name === \"XParallel_Lane_apiPattern_controller\" ||\n              name === \"XParallel_Lane_apiPattern_crud-operation\" ||\n              name === \"XParallel_Lane_apiPattern_data-model\" ||\n              name === \"XParallel_Lane_apiPattern_dependency-injection\" ||\n              name === \"XParallel_Lane_apiPattern_general-api\"\n            ) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodesFolder && propertyValue) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.configGUIServer) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (initializer.destroy) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const searchFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guidA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guidB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guid ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeType ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let nodeInfo ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allChildren ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bars ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bar ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const surfaceGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const httpMethod ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const attrValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const searchForLanes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const name ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const name ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const match ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const initializer ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
      "issueCount": 35,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingPlatform) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingBlock) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (zAxisOffset !== 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (swimlane) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!graphMakerFolder || !this.currentConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!clusterFolder) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!nodesFolder || !linksFolder) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingPlatform ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeCount ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetOrigin ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xParallelModel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zParallelModel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlane ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMakerFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linksFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xBounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zBounds ="
        }
      ]
    },
    {
      "file": "client/services/configGui/stateManager.ts",
      "issueCount": 32,
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase"
        },
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase"
        },
        {
          "type": "naming",
          "message": "Function name 'function\n    return' should be camelCase"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.spacing) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualization) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.axisMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.yAxisConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.numPetTypes) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.enhancedConfig.spacing) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.enhancedConfig.visualization) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (shouldUpdateYAxis) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (currentVisualMapping.backgroundColor === \"None\" || currentVisualMapping.backgroundColor === \"none\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (httpMethodIndex !== -1) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.axisMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axis === \"xAxis\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axis === \"zAxis\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i !== index) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.gui) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const axisMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualization ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shouldUpdateYAxis ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentVisualMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const httpMethodIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentState ="
        }
      ]
    },
    {
      "file": "client/services/configGui/makeConfigGui.ts",
      "issueCount": 30,
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (vizContentFrame) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.configFrame) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axisMappingConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (currentState.enhancedConfig.axisMapping) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collapsibleFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizCollapsibleFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parentFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scrollFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const globalSettings ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypesSection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerGrid ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualizationControls ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const statusLabel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const buttonYOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const axisMappingConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentState ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const screenGui ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
      "issueCount": 27,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!showConnectors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (sourceHex && targetHex) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (sourceAttachment && targetAttachment) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (showLinkLabels) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!attachment) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!centerCube) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const child of children) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (textLabel) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showConnectors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showLinkLabels ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceHex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetHex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceAttachment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetAttachment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const beam ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelParent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let attachment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let centerCube ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const children ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const beam ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const diameter ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const brickColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color3 ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const relationName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabels ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const firstLabel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabel ="
        }
      ]
    },
    {
      "file": "client/controllers/configGUI.controller.ts",
      "issueCount": 26,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (configData.layers) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"regenerateSuccess\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"regenerateError\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"updateSuccess\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"updateError\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteEvent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configData ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const enhancedConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const enhancedConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const properties ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
      "issueCount": 25,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingGraphMaker) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (showNodes && config?.visualization?.showConnectors !== false) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isPersonNode && node.properties?.age) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.type === \"Animals\" && node.properties?.animalType) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerMatch) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingGraphMaker ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeToHexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeToHexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const WIDTH ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const HEIGHT ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labels ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const backgroundColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const borderColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const fullName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerMatch ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeIdx ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/layerGrid.ts",
      "issueCount": 24,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < 3; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value > 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerLabel) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const updateCanvasSize ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const contentHeight ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const notifyLayerChange ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configs ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const addLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNumber ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const previousLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts",
      "issueCount": 23,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!NodePropertiesInspectorService.instance) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.currentNode.properties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.panel) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.panel) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.clickConnection) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.gui) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mouse ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const model ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guid ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const workspace ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMaker ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const props ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const attributes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const props ="
        }
      ]
    },
    {
      "file": "server/services/configGUIServer.service.ts",
      "issueCount": 22,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteValidation.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cluster && cluster.discoveredProperties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"clearGraph\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (graphMakerFolder) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (flatBlock) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.unifiedRenderer && \"destroy\" in this.unifiedRenderer) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (renderer.destroy) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let remoteEvent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteValidation ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMakerFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const flatBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterOrVoid ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const renderer ="
        }
      ]
    },
    {
      "file": "client/services/configGui/validationHandlers.ts",
      "issueCount": 20,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.numNodeTypes < 1 || config.numNodeTypes > 10) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.numLinkTypes < 1 || config.numLinkTypes > 10) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!layerResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.spacing) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!spacingResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.numNodes < 1 || layer.numNodes > GUI_CONSTANTS.VALIDATION.MAX_NODES_PER_LAYER) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.connectionsPerNode < 0 || layer.connectionsPerNode > GUI_CONSTANTS.VALIDATION.MAX_CONNECTIONS_PER_NODE) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of fields) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (field.value < field.min || field.value > field.max) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (numValue === undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (numValue < min || numValue > max) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!result.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (totalNodes > GUI_CONSTANTS.VALIDATION.MAX_TOTAL_NODES) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (totalConnections > GUI_CONSTANTS.VALIDATION.MAX_TOTAL_CONNECTIONS) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer ="
        }
      ]
    },
    {
      "file": "client/services/configGui/eventHandlers.ts",
      "issueCount": 18,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onEnhancedConfigChange) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onEnhancedConfigChange) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!validationResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onEnhancedConfigChange) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!validationResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onUpdateRequest) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onClearRequest) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.configFrame) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.statusLabel) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < count; i++) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        }
      ]
    },
    {
      "file": "server/services/groupAnimationTest.service.ts",
      "issueCount": 18,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < count; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"triggerAnimation\" && !this.isAnimating) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (primaryPart) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.testFolder) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventType ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetPositions ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetPos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const newPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const tween ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
      "issueCount": 17,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!bounds) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (blocksMap) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMinZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMaxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collectiveCenter ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneId ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const adjustedZPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isXParallel ="
        }
      ]
    },
    {
      "file": "client/services/keyboardShortcuts.service.ts",
      "issueCount": 17,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.KeyCode === Enum.KeyCode.Escape) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.KeyCode === Enum.KeyCode.P && this.escPressed) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (timeSinceEsc <= KEYBOARD_CONSTANTS.ESC_TIMEOUT / 1000) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (player) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const inputConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const timeSinceEsc ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const confirmConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cancelConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        }
      ]
    }
  ],
  "allIssues": [
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/dataGenerator.ts",
      "issueCount": 60,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.useTestData) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.layerNumber === 1 && nextLayerNodes) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasBackwardConnection) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < layer.numNodes; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"man\" || nodeTypeName === \"woman\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"child\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"grandparent\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!linkExists) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (count === 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (targetNode) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasBackwardConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numPetTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxPetTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const candidateNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shuffled ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkExists ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sameTypeNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const otherNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxItems ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validHarnessLinks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/rendering/updateManager.ts",
      "issueCount": 60,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (match) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < newLayer.numNodes; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i < newLayer.numNodes) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerNum > newLayerCount) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (hexagon && node.position) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < numConnections; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodeTypeName === \"Animals\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties?.animalType) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentNodesByLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allLinks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentNodesByLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const match ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const matchA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const matchB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const indexA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const indexB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentPos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nextLayerNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allowSameLevelLinks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableTargets ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numConnections ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const j ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetNode ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const link ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypeName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const WIDTH ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const HEIGHT ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeIndex ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/positionCalculator.ts",
      "issueCount": 57,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let layer = 1; layer <= numLayers; layer++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let layer = 1; layer <= numLayers; layer++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let checkLayer = 1; checkLayer <= numLayers; checkLayer++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isYAxis) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const minFinalY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const groundClearanceAdjustment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalOffsetY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numLayers ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const discoveredProperties ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sortedTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeXPositions ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeXPositions ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zPositionMap ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisFromMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const useLayerForY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPositionMap ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const baseX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const checkKey ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const checkNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centeringOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const x ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const z ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const y ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const typeCounter ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const paddedNumber ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithType ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/laneManager.ts",
      "issueCount": 48,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zParallelLanes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xParallelLanes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allLaneBounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeRadius ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const oldMinX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const oldMaxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let overallMinZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let overallMaxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const commonCenterZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zBuffer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlockTop ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockYPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const colors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let fullMinX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let fullMaxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlockTop ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const halfDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMinZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMaxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collectiveCenter ="
        }
      ]
    },
    {
      "file": "shared/utils/validation/configValidation.ts",
      "issueCount": 44,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!layersResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of layerErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.spacing) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of spacingErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.visualization) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of vizErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.axisMapping || cfg.spatialGrouping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of mappingErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.spatialGrouping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.axisMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.visualMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of visualMappingErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.yAxisConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const err of yAxisErrors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.numPetTypes !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cfg.maxDataItems !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of numericFields) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of booleanFields) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!hasOldNames && !hasNewNames) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of stringFields) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of stringFields) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cfg ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layersResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualMappingErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisErrors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const prefix ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasOldNames ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hasNewNames ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappingObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configObj ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result ="
        }
      ]
    },
    {
      "file": "server/services/main/game.service.ts",
      "issueCount": 44,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.gameStarted) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.myStuffFolder) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (true) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (false) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (barPart) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (surfaceGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (textLabel) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (httpMethod) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (attrValue !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n            name === \"ZParallel_Lane_httpMethod_GET\" ||\n            name === \"ZParallel_Lane_httpMethod_POST\" ||\n            name === \"ZParallel_Lane_httpMethod_PUT\" ||\n            name === \"ZParallel_Lane_httpMethod_MULTIPLE\" ||\n            name === \"ZParallel_Lane_httpMethod_UNKNOWN\"\n          ) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n              name === \"XParallel_Lane_apiPattern_controller\" ||\n              name === \"XParallel_Lane_apiPattern_crud-operation\" ||\n              name === \"XParallel_Lane_apiPattern_data-model\" ||\n              name === \"XParallel_Lane_apiPattern_dependency-injection\" ||\n              name === \"XParallel_Lane_apiPattern_general-api\"\n            ) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (nodesFolder && propertyValue) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.configGUIServer) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (initializer.destroy) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const searchFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guidA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guidB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guid ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeType ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let nodeInfo ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allChildren ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bars ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bar ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const surfaceGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const httpMethod ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const attrValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const searchForLanes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const name ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const name ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const match ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const initializer ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/unifiedDataRenderer.ts",
      "issueCount": 35,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingPlatform) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingBlock) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (zAxisOffset !== 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (swimlane) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!graphMakerFolder || !this.currentConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!clusterFolder) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!nodesFolder || !linksFolder) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingPlatform ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeCount ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetOrigin ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xParallelModel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zParallelModel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlane ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMakerFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linksFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xBounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zBounds ="
        }
      ]
    },
    {
      "file": "client/services/configGui/stateManager.ts",
      "issueCount": 32,
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase"
        },
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase"
        },
        {
          "type": "naming",
          "message": "Function name 'function\n    return' should be camelCase"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.spacing) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualization) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.axisMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.yAxisConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.numPetTypes) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.enhancedConfig.spacing) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.enhancedConfig.visualization) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (shouldUpdateYAxis) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (currentVisualMapping.backgroundColor === \"None\" || currentVisualMapping.backgroundColor === \"none\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (httpMethodIndex !== -1) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.axisMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axis === \"xAxis\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axis === \"zAxis\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.state.enhancedConfig.visualMapping) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i !== index) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.state.gui) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const axisMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualization ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shouldUpdateYAxis ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentVisualMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const httpMethodIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentState ="
        }
      ]
    },
    {
      "file": "client/services/configGui/makeConfigGui.ts",
      "issueCount": 30,
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (vizContentFrame) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.configFrame) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axisMappingConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (currentState.enhancedConfig.axisMapping) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collapsibleFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const vizCollapsibleFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parentFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scrollFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const globalSettings ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypesSection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const linkTypes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerGrid ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visualizationControls ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const statusLabel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const buttonYOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const axisMappingConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentState ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const screenGui ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/dataGeneratorRobloxRendererUtils/ropeCreator.ts",
      "issueCount": 27,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!showConnectors) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (sourceHex && targetHex) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (sourceAttachment && targetAttachment) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (showLinkLabels) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!attachment) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!centerCube) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const child of children) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (textLabel) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showConnectors ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showLinkLabels ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceHex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetHex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceAttachment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetAttachment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const beam ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelParent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let attachment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let centerCube ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const children ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const beam ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const diameter ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const brickColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color3 ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const relationName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabels ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const firstLabel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textLabel ="
        }
      ]
    },
    {
      "file": "client/controllers/configGUI.controller.ts",
      "issueCount": 26,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (configData.layers) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"regenerateSuccess\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"regenerateError\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"updateSuccess\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"updateError\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.guiService) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteEvent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configData ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const enhancedConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const enhancedConfig ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const properties ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/rendering/nodeRenderer.ts",
      "issueCount": 25,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingGraphMaker) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (showNodes && config?.visualization?.showConnectors !== false) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isPersonNode && node.properties?.age) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.type === \"Animals\" && node.properties?.animalType) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerMatch) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingGraphMaker ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const showNodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeToHexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeToHexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacing ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const WIDTH ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const HEIGHT ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labels ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const backgroundColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const borderColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const fullName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerMatch ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNum ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeIdx ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/layerGrid.ts",
      "issueCount": 24,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < 3; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value > 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layerLabel) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const updateCanvasSize ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const contentHeight ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const notifyLayerChange ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const configs ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const addLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerNumber ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const previousLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "client/services/nodePropertiesInspector/nodePropertiesInspector.service.ts",
      "issueCount": 23,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!NodePropertiesInspectorService.instance) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.currentNode.properties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.panel) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.panel) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.clickConnection) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.gui) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mouse ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const model ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const guid ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const workspace ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMaker ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const props ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const attributes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const props ="
        }
      ]
    },
    {
      "file": "server/services/configGUIServer.service.ts",
      "issueCount": 22,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteValidation.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (cluster && cluster.discoveredProperties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"clearGraph\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (graphMakerFolder) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (flatBlock) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validationResult.isValid && validationResult.sanitizedConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.unifiedRenderer && \"destroy\" in this.unifiedRenderer) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (renderer.destroy) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let remoteEvent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteValidation ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cluster ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMakerFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const flatBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterOrVoid ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const errorMessage ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const renderer ="
        }
      ]
    },
    {
      "file": "client/services/configGui/validationHandlers.ts",
      "issueCount": 20,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.numNodeTypes < 1 || config.numNodeTypes > 10) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.numLinkTypes < 1 || config.numLinkTypes > 10) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!layerResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.spacing) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!spacingResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.numNodes < 1 || layer.numNodes > GUI_CONSTANTS.VALIDATION.MAX_NODES_PER_LAYER) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (layer.connectionsPerNode < 0 || layer.connectionsPerNode > GUI_CONSTANTS.VALIDATION.MAX_CONNECTIONS_PER_NODE) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (const field of fields) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (field.value < field.min || field.value > field.max) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (numValue === undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (numValue < min || numValue > max) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!result.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (totalNodes > GUI_CONSTANTS.VALIDATION.MAX_TOTAL_NODES) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (totalConnections > GUI_CONSTANTS.VALIDATION.MAX_TOTAL_CONNECTIONS) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layerResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const spacingResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer ="
        }
      ]
    },
    {
      "file": "client/services/configGui/eventHandlers.ts",
      "issueCount": 18,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onEnhancedConfigChange) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onEnhancedConfigChange) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!validationResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onEnhancedConfigChange) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!validationResult.isValid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onUpdateRequest) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.onClearRequest) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.configFrame) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (state.statusLabel) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < count; i++) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const config ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validationResult ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const state ="
        }
      ]
    },
    {
      "file": "server/services/groupAnimationTest.service.ts",
      "issueCount": 18,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < count; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"triggerAnimation\" && !this.isAnimating) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (primaryPart) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.testFolder) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagon ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const eventType ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetPositions ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetPos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const primaryPart ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const newPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const tween ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/shadowBlockCreator.ts",
      "issueCount": 17,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!bounds) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (blocksMap) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMinZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let collectiveMaxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const collectiveCenter ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneId ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const adjustedZPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isXParallel ="
        }
      ]
    },
    {
      "file": "client/services/keyboardShortcuts.service.ts",
      "issueCount": 17,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.KeyCode === Enum.KeyCode.Escape) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.KeyCode === Enum.KeyCode.P && this.escPressed) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (timeSinceEsc <= KEYBOARD_CONSTANTS.ESC_TIMEOUT / 1000) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (player) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.confirmationGui) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const inputConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const timeSinceEsc ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const confirmConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const cancelConnection ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/verticalWallCreator.ts",
      "issueCount": 16,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const platformWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const platformDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowHeight ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallZ ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/utils/colorMapper.ts",
      "issueCount": 15,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (propertyName === \"type\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (propertyName === \"age\" && node.properties?.age !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties && propertyName in node.properties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value in scheme) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\"default\" in scheme) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!visualMapping || visualMapping.backgroundColor === \"none\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!visualMapping || visualMapping.borderColor === \"none\") {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const age ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scheme ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mappedColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const brightness ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const textColor ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/swimlaneBlockCreator.ts",
      "issueCount": 15,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isZParallel && face === Enum.NormalId.Front) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneId ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimLaneBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const color ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const dimensions ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const allShadowBlocks ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isZParallel ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/collapsibleFrame.ts",
      "issueCount": 14,
      "issues": [
        {
          "type": "naming",
          "message": "Function name 'function\n  const' should be camelCase"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isCollapsed) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (dragging && input.UserInputType === Enum.UserInputType.MouseMovement && dragStart && startPos) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let isCollapsed ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const headerCorner ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const toggleButton ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const toggle ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetSize ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const tween ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const setCollapsed ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let dragging ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const delta ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/positionMapper.ts",
      "issueCount": 14,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node => {\n      if (!node.position) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (groundClearanceAdjustment > 0) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxNodesInLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const laneWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const offsetZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const minFinalY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const groundClearanceAdjustment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const paddedNumber ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/boundsCalculator.ts",
      "issueCount": 14,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node => {\n      if (!node.position) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (minX === POSITION_CONSTANTS.BOUNDS.INITIAL_MIN) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (minX === POSITION_CONSTANTS.BOUNDS.INITIAL_MIN) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!cluster) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!cluster.groups[0].nodes) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minY ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/blockDimensionCalculator.ts",
      "issueCount": 14,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let minZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let maxZ ="
        }
      ]
    },
    {
      "file": "shared/modules/ropeLabelMaker/utilities.ts",
      "issueCount": 14,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!relationName) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (splitIndex && splitIndex[0] !== undefined) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const splitPattern ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const splitIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const beforeIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const afterIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const source ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const sourceFormatted ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const targetFormatted ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const pos1 ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const pos2 ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const midpoint ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parts ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/axisMappingSection.ts",
      "issueCount": 13,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propsWithCounts ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const count ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const formatButtonText ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const count ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xAxisButton ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const zAxisButton ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisButton ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const extractPropertyName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const match ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propName ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/yAxisControls.ts",
      "issueCount": 12,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isOpening) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && !gameProcessed) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const newUseLayer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisProperties ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const actualHeight ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isOpening ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const userInputService ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mouse ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target ="
        }
      ]
    },
    {
      "file": "shared/utils/validation/stringValidation.ts",
      "issueCount": 12,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input === undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.allowEmpty) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.trimWhitespace) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.blockSpecialChars) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.customPattern) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.blockSpecialChars) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!result.isValid) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let sanitized ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxLength ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const result ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let result ="
        }
      ]
    },
    {
      "file": "shared/services/base/BaseService.ts",
      "issueCount": 12,
      "issues": [
        {
          "type": "naming",
          "message": "Class name 'for' should be PascalCase"
        },
        {
          "type": "naming",
          "message": "Class name 'and' should be PascalCase"
        },
        {
          "type": "naming",
          "message": "Class name 'cleanup' should be PascalCase"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.isDestroyed) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.isDestroyed) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (index >= 0) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i !== index) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (e) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (instance => {\n      try {\n        if (instance && instance.Parent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (e) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.isDestroyed) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const index ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/visualCustomizationControls.ts",
      "issueCount": 11,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isOpening) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && !gameProcessed) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (closeConnection) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const actualHeight ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const isOpening ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const userInputService ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mouse ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const target ="
        }
      ]
    },
    {
      "file": "client/services/configGui/componentFactory.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.onClick) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.onFocusLost) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.onClick) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value === undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.min !== undefined && value < options.min) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.max !== undefined && value > options.max) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.onFocusLost) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const checkbox ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let checked ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/rendering/labelRenderer.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (swimlaneBlock) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (swimlaneBlock) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axis === \"X\") {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelZ ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneBlock ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        }
      ]
    },
    {
      "file": "shared/modules/labelGroupMaker.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < 3; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (i === 1) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const str ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let result ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const midpoint ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const direction ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockLength ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const startOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const blockPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const lookAtCFrame ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/dropdown.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!isOpen) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && isOpen && optionsFrame) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (optionsFrame) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let isOpen ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const buttonPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const buttonSize ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxVisibleItems ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visibleHeight ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scrollFrame ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const scrollFrame ="
        }
      ]
    },
    {
      "file": "shared/utils/propertyDiscovery.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const objWithProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const props ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const topLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "client/controllers/animationTestGUI.controller.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"animationStarted\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (eventType === \"animationCompleted\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.isAnimating && this.button) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.isAnimating && this.button) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.isAnimating) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.gui) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteEvent ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/core/nodeOrganizer.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let layer = 1; layer <= numLayers; layer++) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countA ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const countB ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodes ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWithLevel ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const layer ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const key ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/constants.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const counts ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const workspace ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const myStuff ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMaker ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodesFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propCounts ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const currentCount ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/yAxisConfigSection.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!currentUseLayer) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (onYAxisModeChange) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (currentUseLayer) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (onYAxisModeChange) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (onYAxisPropertyChange && yAxisPropertyButton) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!currentUseLayer && onYAxisPropertyChange) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const useLayerRadio ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const usePropertyRadio ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisPropertyButton ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let currentUseLayer ="
        }
      ]
    },
    {
      "file": "shared/modules/labelBlockMaker/standardizedInterfaces.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.position) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.rotation) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Size !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Color) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Material) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Transparency !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Anchored !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.CastShadow !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.labels) {"
        }
      ]
    },
    {
      "file": "shared/modules/barMaker/standardizedInterfaces.ts",
      "issueCount": 10,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.position) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.rotation) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Size) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Color) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Material) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Transparency !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.Anchored !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.TopSurface) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.props.BottomSurface) {"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/propertyValueResolver.ts",
      "issueCount": 9,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (extractor) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (error) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value !== undefined) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.properties?.type) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (node.type !== \"Animals\" || !node.properties) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const extractor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const properties ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const ranges ="
        }
      ]
    },
    {
      "file": "shared/modules/hexagonMaker/hexagonMaker.ts",
      "issueCount": 9,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (guid) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < HEXAGON_CONSTANTS.NUM_BARS; i++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (parent) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const dimensions ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexagonName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerCube ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const rotation ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bar ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/spacingControls.ts",
      "issueCount": 8,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= fieldDef.min && value <= fieldDef.max) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const col2X ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const itemsPerColumn ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const column ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const rowIndex ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xPos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/yParallelShadowManager.ts",
      "issueCount": 8,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!config.axisMapping?.yAxis || config.axisMapping.yAxis === \"none\") {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!graphMakerFolder) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!clusterFolder) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const graphMakerFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const clusterFolder ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadowDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yParallelShadows ="
        }
      ]
    },
    {
      "file": "shared/modules/hexStackMaker/hexStackMaker.ts",
      "issueCount": 8,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let level = 0; level < count; level++) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (parent) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const DEFAULT_COLOR_PALETTE ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const colorPalette ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const levelPosition ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const levelColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexModel ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/flatBlockCreator.ts",
      "issueCount": 7,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeDepth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const minSize ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const finalDepth ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/nodeTypesSection.ts",
      "issueCount": 7,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 1 && value <= GUI_CONSTANTS.ENHANCED.DROPDOWN_ITEMS) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 1 && value <= GUI_CONSTANTS.ENHANCED.DROPDOWN_ITEMS) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (value && value >= 1 && value <= GUI_CONSTANTS.ENHANCED.DROPDOWN_ITEMS) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (onPetTypesChange) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/yParallelShadowCreator.ts",
      "issueCount": 7,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (shadowWidth !== undefined && shadowDepth !== undefined) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yGroupBounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadow ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const padding ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadow ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/endcapBlockCreator.ts",
      "issueCount": 7,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isZAxis) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (face === Enum.NormalId.Top && !isZAxis) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlanePos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const swimlaneSize ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const endcapWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const endcapHeight ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const endcap ="
        }
      ]
    },
    {
      "file": "shared/modules/barMaker/barMaker.ts",
      "issueCount": 7,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (parent) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barLength ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const frontFaceOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const backFaceOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barName ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const frontAttachment ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const backAttachment ="
        }
      ]
    },
    {
      "file": "client/services/configGui/utilities.ts",
      "issueCount": 7,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (numValue !== undefined && numValue >= min && numValue <= max) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (originalColor) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (validation.isValid) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const numValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const originalColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const validation ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const originalColor ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/visualizationControls.ts",
      "issueCount": 6,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const columnWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const row ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const col ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xPos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yPos ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const newValue ="
        }
      ]
    },
    {
      "file": "server/services/colorsTest.service.ts",
      "issueCount": 6,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (success && brickColor) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (this.testFolder) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const xOffset ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const position ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/main.ts",
      "issueCount": 6,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const visMapping ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const gui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const availableProps ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisDefaultValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const mainFrame ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/wallManager.ts",
      "issueCount": 6,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!config.axisMapping?.yAxis || config.axisMapping.yAxis === \"none\") {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const wallHeight ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const walls ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const yAxisProperty ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const propertyValue ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bounds ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/managers/platformShadowManager.ts",
      "issueCount": 6,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingPlatform) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (existingBlock) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const platform ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const shadow ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingPlatform ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const existingBlock ="
        }
      ]
    },
    {
      "file": "shared/modules/hexagonMaker/utilities.ts",
      "issueCount": 6,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexStr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackStr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const radius ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barLength ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barWidth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barHeight ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/baseBlockCreator.ts",
      "issueCount": 6,
      "issues": [
        {
          "type": "naming",
          "message": "Class name 'for' should be PascalCase"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (config.canCollide !== undefined) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const width ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const depth ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerX ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const centerZ ="
        }
      ]
    },
    {
      "file": "shared/modules/barMaker/utilities.ts",
      "issueCount": 6,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackStr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexStr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const barStr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const attStr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const hexStr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackStr ="
        }
      ]
    },
    {
      "file": "shared/utils/validation/arrayValidation.ts",
      "issueCount": 5,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.itemValidator) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (let i = 0; i < maxSize; i++) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const arr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const maxSize ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const node ="
        }
      ]
    },
    {
      "file": "shared/modules/hexagonMaker/standardizedInterfaces.ts",
      "issueCount": 5,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.centerPosition) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.barProps) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.barProps.Color) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.barProps.Material) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.barProps.Transparency !== undefined) {"
        }
      ]
    },
    {
      "file": "server/services/graphInitializer.service.ts",
      "issueCount": 4,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!this.configGUIServer) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!remoteEvent) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const players ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const remoteEvent ="
        }
      ]
    },
    {
      "file": "shared/utils/nodePropertyHelpers.ts",
      "issueCount": 4,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!node.properties) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (propertyName === \"type\") {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const age ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const value ="
        }
      ]
    },
    {
      "file": "client/main.client.ts",
      "issueCount": 4,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!player.Character) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const starterGui ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const nodeInspector ="
        }
      ]
    },
    {
      "file": "shared/modules/labelBlockMaker/utilities.ts",
      "issueCount": 4,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (labelConfig) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (labelConfig.text) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (\n          mergedConfig.textSize !== undefined ||\n          mergedConfig.backgroundColor !== undefined ||\n          mergedConfig.textColor !== undefined ||\n          mergedConfig.font !== undefined ||\n          mergedConfig.borderSizePixel !== undefined ||\n          mergedConfig.borderColor !== undefined ||\n          mergedConfig.textWrapped !== undefined\n        ) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelConfig ="
        }
      ]
    },
    {
      "file": "server/services/main/dev2features.ts",
      "issueCount": 4,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (RUN_ANIMATION_TEST) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (RUN_COLORS_TEST) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const RUN_ANIMATION_TEST ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const RUN_COLORS_TEST ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/utils/screenGuiManager.ts",
      "issueCount": 4,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (!axisDropdownGUI) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (axisDropdownGUI) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const player ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const playerGui ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/dropdownTestControls.ts",
      "issueCount": 3,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && isOpen) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let isOpen ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const userInputService ="
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/types.ts",
      "issueCount": 3,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const data ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const data ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const data ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/dropdown.ts",
      "issueCount": 3,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (input.UserInputType === Enum.UserInputType.MouseButton1 && isOpen) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let isOpen ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const userInputService ="
        }
      ]
    },
    {
      "file": "shared/modules/TextLabelMaker.ts",
      "issueCount": 3,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (borderColor) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bgColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const defaultBackgroundColor ="
        }
      ]
    },
    {
      "file": "shared/modules/TextBoxMaker.ts",
      "issueCount": 3,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (borderColor) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bgColor ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const defaultBackgroundColor ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/radioButton.ts",
      "issueCount": 2,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (radioButton) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (innerCircle) {"
        }
      ]
    },
    {
      "file": "shared/constants/axisDefaults.ts",
      "issueCount": 2,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (httpMethodIndex !== -1) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const httpMethodIndex ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/axisMappingControls/components/visualCustomizationSection.ts",
      "issueCount": 2,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const bgColorButton ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const borderColorButton ="
        }
      ]
    },
    {
      "file": "shared/modules/hexStackMaker/standardizedInterfaces.ts",
      "issueCount": 2,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.centerPosition) {"
        },
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (legacy.colors) {"
        }
      ]
    },
    {
      "file": "client/services/configGui/components/status.ts",
      "issueCount": 2,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (isError) {"
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const originalColor ="
        }
      ]
    },
    {
      "file": "shared/modules/ropeLabelMaker/ropeLabelMaker.ts",
      "issueCount": 2,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const parsedRelation ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const labelGroup ="
        }
      ]
    },
    {
      "file": "shared/modules/hexStackMaker/utilities.ts",
      "issueCount": 2,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const stackStr ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const levelY ="
        }
      ]
    },
    {
      "file": "shared/utils/stringUtils.ts",
      "issueCount": 2,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const str ="
        },
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: let result ="
        }
      ]
    },
    {
      "file": "shared/data/tempHarnessLinks.ts",
      "issueCount": 1,
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'with' should be PascalCase"
        }
      ]
    },
    {
      "file": "shared/modules/makeOriginBlock.ts",
      "issueCount": 1,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const block ="
        }
      ]
    },
    {
      "file": "shared/modules/labelBlockMaker/labelBlockMaker.ts",
      "issueCount": 1,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (parent) {"
        }
      ]
    },
    {
      "file": "shared/interfaces/enhancedGenerator.interface.ts",
      "issueCount": 1,
      "issues": [
        {
          "type": "naming",
          "message": "Interface name 'for' should be PascalCase"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/blocks/platformBlockCreator.ts",
      "issueCount": 1,
      "issues": [
        {
          "type": "type",
          "message": "Variable declaration might benefit from explicit type: const platformBlock ="
        }
      ]
    },
    {
      "file": "client/services/configGui/components/frame.ts",
      "issueCount": 1,
      "issues": [
        {
          "type": "type",
          "message": "Function parameters missing type annotations: (options.borderSizePixel === undefined || options.borderSizePixel === 0) {"
        }
      ]
    },
    {
      "file": "shared/modules/renderers/unifiedDataRenderer/index.ts",
      "issueCount": 1,
      "issues": [
        {
          "type": "naming",
          "message": "Class name 'and' should be PascalCase"
        }
      ]
    }
  ]
}