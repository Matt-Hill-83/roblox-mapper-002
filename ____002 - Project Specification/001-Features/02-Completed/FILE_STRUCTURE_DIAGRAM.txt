ROBLOX MAPPER FILE STRUCTURE ANALYSIS
=====================================

CURRENT STRUCTURE WITH ISSUES
-----------------------------

src/
├── client/
│   ├── controllers/
│   │   └── colorPicker.controller.ts  [⚠️ 550 lines - NEEDS SPLITTING]
│   │
│   └── services/
│       ├── configGui/
│       │   ├── makeConfigGui.ts  [⚠️ 381 lines - MONOLITHIC]
│       │   ├── components/
│       │   │   └── layerGrid.ts  [⚠️ 368 lines - TOO LARGE]
│       │   └── [✅ Already has modular structure started]
│       │
│       └── keyboardShortcuts.service.ts  [⚠️ 200+ lines - NEEDS MODULARIZATION]
│
├── server/
│   ├── main.server.ts
│   └── services/
│       ├── main/
│       │   └── game.service.ts  [✅ Main orchestrator]
│       ├── configGUIServer.service.ts  [❓ Orphaned? Unclear relationship]
│       ├── testSimpleDataGenerator.service.ts  [❓ Test file in production?]
│       ├── groupAnimationTest.service.ts  [❓ Test file in production?]
│       └── colorsTest.service.ts  [❓ Test file in production?]
│
└── shared/
    ├── data/  [⚠️ MASSIVE DATA FILES]
    │   ├── entityFileData.ts      [🔥 5,402 lines!]
    │   ├── entityMethodData.ts    [🔥 1,802 lines!]
    │   ├── entityClassData.ts     [🔥 1,802 lines!]
    │   ├── entityFlagData.ts      [🔥 1,602 lines!]
    │   └── [... 20+ more large data files ...]
    │
    ├── modules/
    │   ├── renderers/
    │   │   ├── unifiedDataRenderer.ts  [🔥 885 lines - CRITICAL TO SPLIT]
    │   │   ├── simpleDataRenderer.ts
    │   │   └── dataGeneratorRobloxRenderer.ts
    │   │
    │   ├── hexStackMaker/  [✅ GOOD - Already modularized]
    │   │   ├── index.ts
    │   │   ├── constants.ts
    │   │   ├── interfaces.ts
    │   │   ├── hexStackMaker.ts
    │   │   └── utilities.ts
    │   │
    │   ├── labelGroupMaker.ts  [⚠️ Single file - needs modularization]
    │   ├── TextBoxMaker.ts  [⚠️ Single file - needs modularization]
    │   └── enhancedDataGenerator.ts  [⚠️ 200+ lines - needs splitting]
    │
    └── services/
        └── dataGenerator/
            └── simpleDataGenerator.service.ts  [⚠️ 479 lines - NEEDS SPLITTING]


RECOMMENDED IMPROVED STRUCTURE
------------------------------

src/
├── client/
│   ├── controllers/
│   │   └── colorPicker/  [📁 NEW FOLDER]
│   │       ├── index.ts
│   │       ├── constants.ts
│   │       ├── colorPicker.controller.ts  [📝 Core logic only]
│   │       ├── colorUtils.ts  [📝 Color manipulation utilities]
│   │       ├── presets.ts  [📝 Color presets and themes]
│   │       └── interfaces.ts
│   │
│   └── services/
│       ├── configGui/  [✅ Continue current modularization]
│       │   ├── index.ts
│       │   ├── constants.ts
│       │   ├── interfaces.ts
│       │   ├── core/  [📁 NEW]
│       │   │   ├── guiManager.ts
│       │   │   └── stateManager.ts
│       │   ├── components/  [📁 EXPAND]
│       │   │   ├── layerGrid/  [📁 NEW - Split large file]
│       │   │   │   ├── index.ts
│       │   │   │   ├── constants.ts
│       │   │   │   ├── gridRenderer.ts
│       │   │   │   └── gridLogic.ts
│       │   │   └── [other components...]
│       │   └── utilities/  [📁 RENAME from utilities.ts]
│       │       ├── index.ts
│       │       ├── validation.ts
│       │       └── formatting.ts
│       │
│       └── keyboardShortcuts/  [📁 NEW FOLDER]
│           ├── index.ts
│           ├── constants.ts
│           ├── keyboardShortcuts.service.ts
│           ├── shortcuts/  [📁 Group by feature]
│           │   ├── navigation.ts
│           │   ├── editing.ts
│           │   └── visualization.ts
│           └── keyMappings.ts
│
├── server/
│   ├── main.server.ts
│   └── services/
│       ├── main/
│       │   └── game.service.ts
│       ├── dataServer/  [📁 NEW - Move server data logic]
│       │   └── configGUIServer.service.ts
│       └── _tests/  [📁 NEW - Clearly mark test files]
│           ├── testSimpleDataGenerator.service.ts
│           ├── groupAnimationTest.service.ts
│           └── colorsTest.service.ts
│
└── shared/
    ├── data/  [🔄 CONSIDER: Split or use lazy loading]
    │   ├── entities/  [📁 Group by type]
    │   │   ├── file/
    │   │   │   └── entityFileData.ts  [📝 Consider chunking]
    │   │   ├── method/
    │   │   │   └── entityMethodData.ts
    │   │   └── [other entity types...]
    │   └── relations/  [📁 Group relations]
    │       ├── definedIn/
    │       │   └── relationDefinedInData.ts
    │       └── [other relation types...]
    │
    ├── modules/
    │   ├── renderers/
    │   │   ├── unified/  [📁 NEW - Split unifiedDataRenderer]
    │   │   │   ├── index.ts
    │   │   │   ├── constants.ts
    │   │   │   ├── interfaces.ts
    │   │   │   ├── core/
    │   │   │   │   ├── renderer.ts
    │   │   │   │   └── coordinator.ts
    │   │   │   ├── components/
    │   │   │   │   ├── entityRenderer.ts
    │   │   │   │   ├── relationshipRenderer.ts
    │   │   │   │   └── labelRenderer.ts
    │   │   │   └── utilities/
    │   │   │       ├── positioning.ts
    │   │   │       └── styling.ts
    │   │   ├── simple/
    │   │   │   └── simpleDataRenderer.ts
    │   │   └── roblox/
    │   │       └── dataGeneratorRobloxRenderer.ts
    │   │
    │   ├── labelGroupMaker/  [📁 NEW FOLDER]
    │   │   ├── index.ts
    │   │   ├── constants.ts
    │   │   ├── labelGroupMaker.ts
    │   │   └── utilities.ts
    │   │
    │   ├── textBoxMaker/  [📁 NEW FOLDER]
    │   │   ├── index.ts
    │   │   ├── constants.ts
    │   │   ├── textBoxMaker.ts
    │   │   └── textUtils.ts
    │   │
    │   └── dataGenerator/  [📁 NEW - Split enhancedDataGenerator]
    │       ├── index.ts
    │       ├── constants.ts
    │       ├── interfaces.ts
    │       ├── enhanced/
    │       │   ├── enhancedGenerator.ts
    │       │   └── enhancementUtils.ts
    │       └── processors/
    │           ├── entityProcessor.ts
    │           └── relationshipProcessor.ts
    │
    └── services/
        └── dataGenerator/
            └── simple/  [📁 NEW FOLDER]
                ├── index.ts
                ├── constants.ts
                ├── interfaces.ts
                ├── simpleDataGenerator.service.ts  [📝 Core logic only]
                ├── generators/  [📁 Split by responsibility]
                │   ├── entityGenerator.ts
                │   ├── relationshipGenerator.ts
                │   └── layoutGenerator.ts
                └── utilities/
                    ├── validation.ts
                    └── transformation.ts


KEY IMPROVEMENTS
----------------

1. MODULARIZATION PATTERN:
   - Each large file becomes a folder
   - Standard structure: index.ts, constants.ts, interfaces.ts
   - Core logic separated from utilities
   - Clear separation of concerns

2. FILE SIZE TARGETS:
   - No file > 300 lines (except generated data)
   - Complex logic split into focused modules
   - Constants extracted to dedicated files

3. ORGANIZATION BENEFITS:
   - Test files clearly marked in _tests/ folder
   - Related functionality grouped together
   - Consistent folder structure throughout
   - Easy to find and maintain code

4. PRIORITY SPLITS:
   🔥 HIGH: unifiedDataRenderer.ts (885 lines)
   🔥 HIGH: colorPicker.controller.ts (550 lines)
   ⚠️ MEDIUM: simpleDataGenerator.service.ts (479 lines)
   ⚠️ MEDIUM: makeConfigGui.ts (381 lines)
   ⚠️ MEDIUM: layerGrid.ts (368 lines)

5. DATA FILE STRATEGY:
   - Consider lazy loading for large data files
   - Group by entity/relation type
   - Investigate code generation optimizations
   - Potential for runtime data loading vs compile-time

MIGRATION STEPS
---------------

1. Start with highest priority files (unifiedDataRenderer)
2. Create folder structure first
3. Extract constants and interfaces
4. Split logic into focused modules
5. Update imports across codebase
6. Test each migration thoroughly
7. Remove orphaned test files or move to _tests/

EXAMPLE SPLIT: unifiedDataRenderer.ts
-------------------------------------

FROM: 885-line monolithic file

TO:
unified/
├── index.ts (20 lines - exports)
├── constants.ts (50 lines - all config values)
├── interfaces.ts (30 lines - type definitions)
├── core/
│   ├── renderer.ts (150 lines - main render logic)
│   └── coordinator.ts (100 lines - orchestration)
├── components/
│   ├── entityRenderer.ts (120 lines)
│   ├── relationshipRenderer.ts (130 lines)
│   └── labelRenderer.ts (90 lines)
└── utilities/
    ├── positioning.ts (100 lines)
    └── styling.ts (95 lines)

Total: Same functionality, better organized!